<html><head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Test Execution Summary</title>
    <style type="text/css" media="screen">
p {margin-top:0in; margin-bottom:.0001pt; margin-left:0in; margin-right:0in;}
ul, ol  {margin-top:0in; margin-bottom:.0001pt; margin-left:0in; margin-right:0in;}
body, table { font-family: Arial, Helvetica, Tahoma; font-size: 9pt; }
table.display { font-family: Arial, Helvetica, Tahoma; font-size: 9pt; width: 100%;}
table.display2 { font-family: Arial, Helvetica, Tahoma; font-size: 9pt; width: 95%;}
.display td, .display2 td { vertical-align: top; font-size: 9pt;}
table.list { font-family: Arial, Helvetica, Tahoma; font-size: 9pt; width: 95%; border-width: 1px; border-style: solid; border-color: #333399; border-collapse: collapse; padding: 5px 5px 5px 5px; }
.list th { color: #000000; background-color: #F9F9E3; border-width: 1px; border-style: solid; border-color: #333399; }
.list td { background-color: #F9F7F7; vertical-align: top; border-width: 1px; border-style: solid; border-color: #333399; padding: 5px 5px 5px 5px; }
table.list2 { font-family: Arial, Helvetica, Tahoma; font-size: 9pt; border-width: 0px; border-style: solid; border-color: #333399; padding: 0px 0px 0px 0px; }
.list2 th { font-size: 11pt; color: #333399; text-align: left; text-decoration: underline; background-color: #FFFFFF; padding: 2px 2px 2px 2px; }
.list2 td { background-color: #FFFFFF; vertical-align: top; padding: 2px 2px 2px 2px; }
table.list3 { font-family: Arial, Helvetica, Tahoma; font-size: 9pt; width: 100%; border-width: 1px; border-style: solid; border-color: #333399; border-collapse: collapse; padding: 0px 0px 0px 0px; }
.list3 th { color: #000000; background-color: #ECECEC; border-width: 1px 0px 1px 0px; border-style: solid; border-color: #333399; padding: 5px 5px 5px 5px; }
.list3 td { background-color: #F9F7F7; vertical-align: top; border-style: solid; border-color: #333399; border-width: 1px 0px 1px 0px; padding: 5px 5px 5px 5px; }
td.logo { width: 10%; }
.border { border-width: 0px; border-style: solid; border-color: #333399; padding: 2px 2px 2px 2px; }
.center { text-align: center; }
.right { text-align: right; }
.nowrap { white-space: nowrap; }
.title { font-size: 16pt; color: #333399; font-weight: bold; text-align: center; }
.date { font-size: 10pt; color: #333399; font-weight: bold; text-align: right; }
.header { font-size: 11pt; color: #000000; text-align: center; }
.footer { font-size: 9pt; color: #999999; text-align: left; }
.heading1 { font-size: 11pt; color: #000000; font-weight: bold; background-color: #F6E78C; }
.heading2 { font-size: 11pt; color: #333399; font-weight: bold; background-color: #F6E78C; }
.heading3 { font-size: 11pt; color: #000000; font-weight: bold; background-color: #E6E6CB; }
.heading4 { font-size: 11pt; color: #333399; font-weight: bold; background-color: #E6E6CB; }
.heading5 { font-size: 11pt; color: #000000; font-weight: bold; background-color: #CFCF9D; }
.heading6 { font-size: 11pt; color: #333399; font-weight: bold; background-color: #CFCF9D; }
.heading7 { font-size: 15pt; color: #000000; font-weight: bold; background-color: #CFCF9D; }
.heading8 { font-size: 10pt; color: #000000; font-weight: bold; text-align: center; background-color: #F5EFCA; }
.heading9 { font-size: 10pt; color: #000000; font-weight: bold; background-color: #F6E78C; }
.grouping1 { font-size: 10pt; color: #333399; font-weight: bold; background-color: #CFCF9D; }
.grouping2 { font-size: 10pt; color: #000000; font-weight: bold; background-color: #CFCF9D; }
.grouping3 { font-size: 9pt; color: #333399; font-weight: bold; background-color: #E6E6CB; }
.odd_row { background-color: #F8F3F7; }
.even_row { background-color: #FFFBFF; }
.level1 { background-color: #FFEFF7; padding: 2px 2px 2px 2px; }
.level2 { background-color: #F7E7EF; padding: 2px 2px 2px 2px; }
.level2_indent { background-color: #F7E7EF; padding: 2px 2px 2px 12px; }
.level3 { background-color: #EFDFE7; padding: 2px 2px 2px 2px; }
.level3_indent { background-color: #EFDFE7; padding: 2px 2px 2px 22px; }
.level4 { background-color: #E7D7DF; padding: 2px 2px 2px 2px; }
.level4_indent { background-color: #E7D7DF; padding: 2px 2px 2px 32px; }
.level5 { background-color: #DFCFD7; padding: 2px 2px 2px 2px; }
.level5_indent { background-color: #DFCFD7; padding: 2px 2px 2px 42px; }
.level6 { background-color: #D1BFC8; padding: 2px 2px 2px 2px; }
.level6_indent { background-color: #D1BFC8; padding: 2px 2px 2px 52px; }
.level7 { background-color: #C2B0B9; padding: 2px 2px 2px 2px; }
.level7_indent { background-color: #C2B0B9; padding: 2px 2px 2px 62px; }
.level8 { background-color: #B0A0A8; padding: 2px 2px 2px 2px; }
.level8_indent { background-color: #B0A0A8; padding: 2px 2px 2px 72px; }
.indent_transparent { padding: 0px 0px 0px 12px }
.context_backward_level4_indent { background-color: #E7D7DF; padding: 2px 2px 2px 2px; }
.context_backward_level3_indent { background-color: #EFDFE7; padding: 2px 2px 2px 12px; }
.context_backward_level2_indent { background-color: #F7E7EF; padding: 2px 2px 2px 22px; }
.context_backward_level1_indent { background-color: #FFEFF7; padding: 2px 2px 2px 32px; }
.context { color: #333399; font-weight: bold; background-color: #FFFFFF; border-style: solid; border-color: #000000; border-width: 1px; padding: 2px 2px 2px 2px; }
.context_indent { color: #333399; font-weight: bold; background-color: #FFFFFF; border-style: solid; border-color: #000000; border-width: 1px; padding: 2px 2px 2px 42px; }
.context_forward_level1_indent { background-color: #FFEFF7; padding: 2px 2px 2px 52px; }
.context_forward_level2_indent { background-color: #F7E7EF; padding: 2px 2px 2px 62px; }
.context_forward_level3_indent { background-color: #EFDFE7; padding: 2px 2px 2px 72px; }
.context_forward_level4_indent { background-color: #E7D7DF; padding: 2px 2px 2px 82px; }
.document_level1 { background-color: #FFFFFF; padding: 2px 2px 2px 2px; }
.document_level2 { background-color: #FFFFFF; padding: 2px 2px 2px 12px; }
.document_level3 { background-color: #FFFFFF; padding: 2px 2px 2px 22px; }
.document_level4 { background-color: #FFFFFF; padding: 2px 2px 2px 32px; }
.underline { text-decoration: underline; }
.bold { color: #000000; font-weight: bold; }
.bold_large { font-size: 12pt; color: #000000; font-weight: bold; }
.bold_very_large { font-size: 14pt; color: #000000; font-weight: bold; }
.bold_italic { color: #000000; font-weight: bold; font-style: italic; }
.bold_underline { color: #000000; font-weight: bold; text-decoration: underline; }
.bold_color { color: #333399; font-weight: bold; }
.bold_color_large { font-size: 12pt; color: #333399; font-weight: bold; }
.bold_color_italic { color: #333399; font-weight: bold; font-style: italic; }
.bold_color_underline { color: #333399; font-weight: bold; text-decoration: underline; }
.bold_color_underline_large { font-size: 11pt; color: #333399; font-weight: bold; text-decoration: underline; }
.hr_default { height:1px; width:100%; color: #000000; background:#000000; }
.calendar_no_date_cell { background-color: #F3F3F3; }
</style>

    <style type="text/css" media="print">
p {margin-top:0in; margin-bottom:.0001pt; margin-left:0in; margin-right:0in;}
ul, ol  {margin-top:0in; margin-bottom:.0001pt; margin-left:0in; margin-right:0in;}
thead { display: table-header-group; }
tfoot { display: table-footer-group; }
tbody { display:table-row-group; }
body, table { font-family: Arial, Helvetica, Tahoma; font-size: 9pt; }
table.display { font-family: Arial, Helvetica, Tahoma; font-size: 9pt; width: 100%;}
table.display2 { font-family: Arial, Helvetica, Tahoma; font-size: 9pt; width: 95%;}
.display td, .display2 td { vertical-align: top; font-size: 9pt;}
table.list { font-family: Arial, Helvetica, Tahoma; font-size: 9pt; width: 95%; border-width: 1px; border-style: solid; border-color: #333399; border-collapse: collapse; padding: 5px 5px 5px 5px; }
.list th { color: #000000; background-color: #F9F9E3; border-width: 1px; border-style: solid; border-color: #333399; }
.list td { background-color: #F9F7F7; vertical-align: top; border-width: 1px; border-style: solid; border-color: #333399; padding: 5px 5px 5px 5px; }
table.list2 { font-family: Arial, Helvetica, Tahoma; font-size: 9pt; border-width: 0px; border-style: solid; border-color: #333399; padding: 0px 0px 0px 0px; }
.list2 th { font-size: 11pt; color: #333399; text-align: left; text-decoration: underline; background-color: #FFFFFF; padding: 2px 2px 2px 2px; }
.list2 td { background-color: #FFFFFF; vertical-align: top; padding: 2px 2px 2px 2px; }
table.list3 { font-family: Arial, Helvetica, Tahoma; font-size: 9pt; width: 100%; border-width: 1px; border-style: solid; border-color: #333399; border-collapse: collapse; padding: 0px 0px 0px 0px; }
.list3 th { color: #000000; background-color: #ECECEC; border-width: 1px 0px 1px 0px; border-style: solid; border-color: #333399; padding: 5px 5px 5px 5px; }
.list3 td { background-color: #F9F7F7; vertical-align: top; border-style: solid; border-color: #333399; border-width: 1px 0px 1px 0px; padding: 5px 5px 5px 5px; }
td.logo { width: 10%; }
.border { border-width: 0px; border-style: solid; border-color: #333399; padding: 2px 2px 2px 2px; }
.center { text-align: center; }
.right { text-align: right; }
.nowrap { white-space: nowrap; }
.title { font-size: 16pt; color: #333399; font-weight: bold; text-align: center; }
.date { font-size: 10pt; color: #333399; font-weight: bold; text-align: right; }
.header { font-size: 11pt; color: #000000; text-align: center; }
.footer { font-size: 9pt; color: #999999; text-align: left; }
.heading1 { font-size: 11pt; color: #000000; font-weight: bold; background-color: #F6E78C; }
.heading2 { font-size: 11pt; color: #333399; font-weight: bold; background-color: #F6E78C; }
.heading3 { font-size: 11pt; color: #000000; font-weight: bold; background-color: #E6E6CB; }
.heading4 { font-size: 11pt; color: #333399; font-weight: bold; background-color: #E6E6CB; }
.heading5 { font-size: 11pt; color: #000000; font-weight: bold; background-color: #CFCF9D; }
.heading6 { font-size: 11pt; color: #333399; font-weight: bold; background-color: #CFCF9D; }
.heading7 { font-size: 15pt; color: #000000; font-weight: bold; background-color: #CFCF9D; }
.heading8 { font-size: 10pt; color: #000000; font-weight: bold; text-align: center; background-color: #F5EFCA; }
.heading9 { font-size: 10pt; color: #000000; font-weight: bold; background-color: #F6E78C; }
.grouping1 { font-size: 10pt; color: #333399; font-weight: bold; background-color: #CFCF9D; }
.grouping2 { font-size: 10pt; color: #000000; font-weight: bold; background-color: #CFCF9D; }
.grouping3 { font-size: 9pt; color: #333399; font-weight: bold; background-color: #E6E6CB; }
.odd_row { background-color: #F8F3F7; }
.even_row { background-color: #FFFBFF; }
.level1 { background-color: #FFEFF7; padding: 2px 2px 2px 2px; }
.level2 { background-color: #F7E7EF; padding: 2px 2px 2px 2px; }
.level2_indent { background-color: #F7E7EF; padding: 2px 2px 2px 12px; }
.level3 { background-color: #EFDFE7; padding: 2px 2px 2px 2px; }
.level3_indent { background-color: #EFDFE7; padding: 2px 2px 2px 22px; }
.level4 { background-color: #E7D7DF; padding: 2px 2px 2px 2px; }
.level4_indent { background-color: #E7D7DF; padding: 2px 2px 2px 32px; }
.level5 { background-color: #DFCFD7; padding: 2px 2px 2px 2px; }
.level5_indent { background-color: #DFCFD7; padding: 2px 2px 2px 42px; }
.level6 { background-color: #D1BFC8; padding: 2px 2px 2px 2px; }
.level6_indent { background-color: #D1BFC8; padding: 2px 2px 2px 52px; }
.level7 { background-color: #C2B0B9; padding: 2px 2px 2px 2px; }
.level7_indent { background-color: #C2B0B9; padding: 2px 2px 2px 62px; }
.level8 { background-color: #B0A0A8; padding: 2px 2px 2px 2px; }
.level8_indent { background-color: #B0A0A8; padding: 2px 2px 2px 72px; }
.indent_transparent { padding: 0px 0px 0px 12px; }
.context_backward_level4_indent { background-color: #E7D7DF; padding: 2px 2px 2px 2px; }
.context_backward_level3_indent { background-color: #EFDFE7; padding: 2px 2px 2px 12px; }
.context_backward_level2_indent { background-color: #F7E7EF; padding: 2px 2px 2px 22px; }
.context_backward_level1_indent { background-color: #FFEFF7; padding: 2px 2px 2px 32px; }
.context { color: #333399; font-weight: bold; background-color: #FFFFFF; border-style: solid; border-color: #000000; border-width: 1px; padding: 2px 2px 2px 2px; }
.context_indent { color: #333399; font-weight: bold; background-color: #FFFFFF; border-style: solid; border-color: #000000; border-width: 1px; padding: 2px 2px 2px 42px; }
.context_forward_level1_indent { background-color: #FFEFF7; padding: 2px 2px 2px 52px; }
.context_forward_level2_indent { background-color: #F7E7EF; padding: 2px 2px 2px 62px; }
.context_forward_level3_indent { background-color: #EFDFE7; padding: 2px 2px 2px 72px; }
.context_forward_level4_indent { background-color: #E7D7DF; padding: 2px 2px 2px 82px; }
.document_level1 { background-color: #FFFFFF; padding: 2px 2px 2px 2px; }
.document_level2 { background-color: #FFFFFF; padding: 2px 2px 2px 12px; }
.document_level3 { background-color: #FFFFFF; padding: 2px 2px 2px 22px; }
.document_level4 { background-color: #FFFFFF; padding: 2px 2px 2px 32px; }
.underline { text-decoration: underline; }
.bold { color: #000000; font-weight: bold; }
.bold_large { font-size: 12pt; color: #000000; font-weight: bold; }
.bold_very_large { font-size: 14pt; color: #000000; font-weight: bold; }
.bold_italic { color: #000000; font-weight: bold; font-style: italic; }
.bold_underline { color: #000000; font-weight: bold; text-decoration: underline; }
.bold_color { color: #333399; font-weight: bold; }
.bold_color_large { font-size: 12pt; color: #333399; font-weight: bold; }
.bold_color_italic { color: #333399; font-weight: bold; font-style: italic; }
.bold_color_underline { color: #333399; font-weight: bold; text-decoration: underline; }
.bold_color_underline_large { font-size: 11pt; color: #333399; font-weight: bold; text-decoration: underline; }
.hr_default { height:1px; width:100%; color: #000000; background:#000000; }
.calendar_no_date_cell { background-color: #F3F3F3; }
</style>

	<script type="text/javascript">
		var line_count=0;
		
		function writeEvenOddTRTag() {
			line_count++; 
			if (line_count%2 == 0)
				document.write("<tr class='even_row'>");
			else
				document.write("<tr class='odd_row'>");
		}
	</script>
</head>



<body>
<table class="heading">
<tbody><tr>
	<td></td>
	<td class="title_white" width="100%" align="right">Test Execution Summary</td>
	<td>&nbsp;</td>
</tr>
</tbody></table>
<table class="white_bg">
    <tbody><tr><td></td></tr>
</tbody></table>
<table class="heading" width="100%">
    <tbody><tr><td></td></tr>

</tbody></table>
<p class="header"></p>
<p class="date">Nov 15, 2016</p>

<table class="detailcols fullWidth">
<!-- block ID=4450-->

<!-- Display issue heading -->
<tbody><tr><th style="text-align: left">MM_EEPROM - Item 4450 </th></tr>
<!-- Display issue field names and values -->

<tr><td><b>TEST_Test_Name:</b> MM_EEPROM</td></tr>

<tr><td><b>TEST_Description:</b> <!-- MKS HTML -->The purpose of this 
test is to verify the Memory Manager (MM) EEPROM commands of the Core 
Flight System (CFS). This test verifies that the EEPROM commands 
function properly and that the MM application handles anomalies 
appropriately.</td></tr>

<tr><td><b>TEST_Current_Build:</b> 2.4.1.0</td></tr>

<tr><td><b>TEST_Execution_Assigned_To:</b> Walt Moleski (wmoleski)</td></tr>

<tr><td><b>TEST_Execution_Testbed:</b> cFE 6.5.0.0; OSAL 4.2.0.0; PSP 1.3.0.0</td></tr>

<tr><td><b>TEST_Execution_Checksum:</b> 50244</td></tr>

<tr><td><b>TEST_Execution_Completion_Date:</b> Nov 15, 2016</td></tr>

<tr><td><b>TEST_Execution_Time:</b> 968.792 seconds or 16.1465 minutes</td></tr>

<tr><td><b>TEST_Execution_Comments:</b> <!-- MKS HTML -->All requirements passed.</td></tr>

<tr><td><b>TEST_Comments:</b> &nbsp;</td></tr>

<!-- Relationships info -->
<!-- Display relationship heading -->
<tr><td>DCRs Submitted / Tested and Requirements Validated</td></tr>


<tr><td class="detailheading" style="text-align: left">Links_To_TEST_from_DCRs_Backward,ALM_Validates:</td></tr>
<tr>
    <td>
        <table class="detailcols fullWidth">
        
        <tbody><tr>
            
            <th>ReqID</th>
            
            <th>Text</th>
            
            <th>Build Test Method</th>
            
            <th>REQ_Build_Sys_Test_Results</th>
            
            <th>REQ_Build_Sys_Test_Comments</th>
            
            <th>DCR_Title</th>
            
            <th>DCR_TEST_Outcome</th>
            
        </tr>
        <!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM1006</td>
            
            <td><!-- MKS HTML -->For all MM commands, if the length 
contained in the message header is not equal to the expected length, MM 
shall reject the command.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the Cmds, EEPROM, MemMap and RAM tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM1007</td>
            
            <td><!-- MKS HTML -->If the address specified in any MM command fails validation, MM shall reject the command</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM, MemMap, and RAM tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM1008</td>
            
            <td><!-- MKS HTML -->If the filename specified in any MM command is not valid, MM shall reject the command</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM, MemMap, and RAM tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM1009</td>
            
            <td><!-- MKS HTML -->If MM accepts any command as valid, MM 
shall execute the command, increment the MM Valid Command Counter and 
issue an event message</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM1010</td>
            
            <td><!-- MKS HTML -->If MM rejects any command, MM shall 
abort the command execution, increment the MM Command Rejected Counter 
and issue an error event message</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in all tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM3000</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Poke command , MM shall write 8, 16, or 32 bits of data to the command-specified EEPROM address</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM3000.1</td>
            
            <td><!-- MKS HTML --><p>MM shall confirm a write to the EEPROM address &nbsp;by issuing an event message which includes:</p><p>a) address written</p><p>b) length of data written</p><p>c) value of the data written</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM3001</td>
            
            <td><!-- MKS HTML --><p>Upon receipt of a Peek command, 
&nbsp;MM shall read 8, 16, or 32 bits of data from the command-specified
 EEPROM address &nbsp;and generate an event message containing the 
following data:</p><p>a) address read</p><p>b) length of data read</p><p>c) value of the data read</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM3002</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Read command, 
&nbsp;MM shall read the command-specified number of consecutive bytes 
from the command-specified EEPROM memory address &nbsp;and generate an 
event message containing the data.</td>
            
            <td>Analysis</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM3002.1</td>
            
            <td><!-- MKS HTML -->If the number of bytes exceeds the maximum event message size then the command shall be rejected.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM3100</td>
            
            <td><!-- MKS HTML --><p>Upon receipt of a Load from File 
command, MM shall load EEPROM memory based on the following information 
contained in the command-specified "file:"</p><p>a) Destination Address</p><p>b) Destination Memory Type</p><p>c) &lt;MISSION_DEFINED&gt; CRC (data only)</p><p>d) Number of Bytes to Load</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM3100.1</td>
            
            <td><!-- MKS HTML -->If the CRC contained in the file fails validation, &nbsp;MM shall reject the command</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM3100.2</td>
            
            <td><!-- MKS HTML -->If the number of bytes exceeds &lt;PLATFORM_DEFINED, TBD&gt; then the command shall be rejected.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM3104</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Dump to File command,
 MM shall write the data associated with the command-specified EEPROM 
address ,command-specified number of bytes and calculated 
&lt;MISSION_DEFINED&gt; CRC to the command-specified file.</td>
            
            <td>Analysis</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM 
and SymTab tests. The files from each test were examined to verify they 
contained the correct data. They did.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM3104.1</td>
            
            <td><!-- MKS HTML -->If the command-specified number of bytes exceeds &lt;PLATFORM_DEFINED, TBD&gt; then the command shall be rejected.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM3200</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Fill command, MM 
shall fill EEPROM memory with the contents based on the following 
command-specified parameters: a) Destination Address b) Destination 
Memory Type c) Number of Bytes to Fill d) 32-bit &nbsp;Fill Pattern</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM3200.1</td>
            
            <td><!-- MKS HTML -->If the command-specified number of bytes exceeds &lt;PLATFORM_DEFINED, TBD&gt; then the command shall be rejected.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM3300</td>
            
            <td><!-- MKS HTML -->When writing data to EEPROM memory, MM shall write a maximum of &lt;PLATFORM_DEFINED, TBD&gt; bytes &nbsp;per execution cycle</td>
            
            <td>Analysis</td>
            
            <td>Partial Pass</td>
            
            <td><!-- MKS HTML -->To verify this requirement, the ES 
Performance Analysis Monitor was started before performing a load from 
file command. After the command completed, the Performance Analysis data
 capture was stopped and the file transferred to the ground. The 
analysis of this file requires a Performance Analysis data viewing tool 
that is no longer available. The MM_SEGBREAK_PERF_ID marker should 
contain data to verify segmentation was occurring. This tool was last 
available for MM 2.3.0.0. Below are the comments from the 2.3.0.0 test 
that fully passed this requirement. &nbsp; The performance analysis log 
was turned on to test this requirement. The resulting performance data 
was analyzed to determine if there was any data for the 
MM_SEGBREAK_PERF_ID marker. The file contained a block of data that had 
numerous spikes which indicates that the Memory Manager task was 
performing segmentation. To verify this requirement, the ES Performance 
Analysis was started before performing a dump to file command. After the
 command completed, the Performance Analysis data capture was stopped 
and the file transferred to the ground. The analysis of this file 
requires a Performance Analysis data viewing tool that is no longer 
available. The MM_SEGBREAK_PERF_ID marker should contain data to verify 
segmentation was occurring. This tool was last available for MM 2.3.0.0.
 Below are the comments from the 2.3.0.0 test that fully passed this 
requirement.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM3301</td>
            
            <td><!-- MKS HTML -->When writing EEPROM data to a file, MM shall write a maximum of &lt;PLATFORM_DEFINED, TBD&gt; bytes per execution cycle</td>
            
            <td>Analysis</td>
            
            <td>Partial Pass</td>
            
            <td><!-- MKS HTML -->The performance analysis log was turned
 on to test this requirement. The resulting performance data was 
analyzed to determine if there was any data for the MM_SEGBREAK_PERF_ID 
marker. The file contained a block of data that had numerous spikes 
which indicates that the Memory Manager task was performing 
segmentation.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM3400</td>
            
            <td><!-- MKS HTML -->Upon receipt of an Enable EEPROM command, MM shall enable the command specified bank of EEPROM for writing.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM3500</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Disable EEPROM command, MM shall disable/lock the command specified bank of EEPROM from being written to.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM8000</td>
            
            <td><!-- MKS HTML --><p>MM shall generate a housekeeping message containing the following:</p><p>a) Valid Command Counter</p><p>b) Command Rejected Counter</p><p>c) Last command executed</p><p>d) Address for last command</p><p>e) Memory Type for last command</p><p>f) Number of bytes specified by last command</p><p>g) Filename used in last command</p><p>h) Data Value for last command (may be fill pattern or peek/poke value)</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in all tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->
<!-- block ID=4450-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM9000</td>
            
            <td><!-- MKS HTML -->ADDD &nbsp; Upon initialization of the MM Application, &nbsp; MM shall initialize the following data to Zero</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in all tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4450-->

        </tbody></table>
    </td>
</tr>

<tr><td><hr class="hr_default"></td></tr>
<tr><td>&nbsp;</td></tr>
<script type="text/javascript"> line_count=0; </script>
<!-- blockend ID=4450-->
<!-- block ID=4449-->

<!-- Display issue heading -->
<tr><th style="text-align: left">MM_GenCmds - Item 4449 </th></tr>
<!-- Display issue field names and values -->

<tr><td><b>TEST_Test_Name:</b> MM_GenCmds</td></tr>

<tr><td><b>TEST_Description:</b> <!-- MKS HTML -->The purpose of this 
test is to verify that the Memory Manager (MM) general commands function
 properly. The MM_NOOP and MM_Reset commands will be tested as well as 
invalid commands to see if the MM application handles these 
appropriately.</td></tr>

<tr><td><b>TEST_Current_Build:</b> 2.4.1.0</td></tr>

<tr><td><b>TEST_Execution_Assigned_To:</b> Walt Moleski (wmoleski)</td></tr>

<tr><td><b>TEST_Execution_Testbed:</b> cFE 6.5.0.0; OSAL 4.2.0.0; PSP 1.3.0.0</td></tr>

<tr><td><b>TEST_Execution_Checksum:</b> 50244</td></tr>

<tr><td><b>TEST_Execution_Completion_Date:</b> Nov 14, 2016</td></tr>

<tr><td><b>TEST_Execution_Time:</b> 268.07 seconds or 4.46783 minutes</td></tr>

<tr><td><b>TEST_Execution_Comments:</b> <!-- MKS HTML -->All requirements passed.</td></tr>

<tr><td><b>TEST_Comments:</b> &nbsp;</td></tr>

<!-- Relationships info -->
<!-- Display relationship heading -->
<tr><td>DCRs Submitted / Tested and Requirements Validated</td></tr>


<tr><td class="detailheading" style="text-align: left">Links_To_TEST_from_DCRs_Backward,ALM_Validates:</td></tr>
<tr>
    <td>
        <table class="detailcols fullWidth">
        
        <tbody><tr>
            
            <th>ReqID</th>
            
            <th>Text</th>
            
            <th>Build Test Method</th>
            
            <th>REQ_Build_Sys_Test_Results</th>
            
            <th>REQ_Build_Sys_Test_Comments</th>
            
            <th>DCR_Title</th>
            
            <th>DCR_TEST_Outcome</th>
            
        </tr>
        <!-- block ID=4449-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM1000</td>
            
            <td><!-- MKS HTML -->Upon receipt of a No-Op command, MM shall increment the MM Valid Command Counter and generate an event message.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4449-->
<!-- block ID=4449-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM1001</td>
            
            <td><!-- MKS HTML --><p>Upon receipt of a Reset command, &nbsp;MM shall reset the following housekeeping variables to a value of zero:</p><p>a) MM Valid Command Counter</p><p>b) MM Command Rejected Counter</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4449-->
<!-- block ID=4449-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM1006</td>
            
            <td><!-- MKS HTML -->For all MM commands, if the length 
contained in the message header is not equal to the expected length, MM 
shall reject the command.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the Cmds, EEPROM, MemMap and RAM tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4449-->
<!-- block ID=4449-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM1009</td>
            
            <td><!-- MKS HTML -->If MM accepts any command as valid, MM 
shall execute the command, increment the MM Valid Command Counter and 
issue an event message</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4449-->
<!-- block ID=4449-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM1010</td>
            
            <td><!-- MKS HTML -->If MM rejects any command, MM shall 
abort the command execution, increment the MM Command Rejected Counter 
and issue an error event message</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in all tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4449-->
<!-- block ID=4449-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM1013</td>
            
            <td><!-- MKS HTML -->The MM application shall generate an 
error event message if symbol table operations are initiated but not 
supported in the current target environment.</td>
            
            <td>Inspection</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement is set to "U" in cmds 
and symtab since vxworks now implements Symbol Table Operations. The MM 
code to handle the Symbol Table Dump command did not change but the 
underlying OSAL code now creates the specified file if it is valid. 
Previous OSAL versions returned an error of OS_ERR_NOT_IMPLEMENTED.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4449-->
<!-- block ID=4449-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM7001</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Write Symbol Table command, MM shall save the system symbol table to an onboard data file</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4449-->
<!-- block ID=4449-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM8000</td>
            
            <td><!-- MKS HTML --><p>MM shall generate a housekeeping message containing the following:</p><p>a) Valid Command Counter</p><p>b) Command Rejected Counter</p><p>c) Last command executed</p><p>d) Address for last command</p><p>e) Memory Type for last command</p><p>f) Number of bytes specified by last command</p><p>g) Filename used in last command</p><p>h) Data Value for last command (may be fill pattern or peek/poke value)</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in all tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4449-->
<!-- block ID=4449-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM9000</td>
            
            <td><!-- MKS HTML -->ADDD &nbsp; Upon initialization of the MM Application, &nbsp; MM shall initialize the following data to Zero</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in all tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4449-->

        </tbody></table>
    </td>
</tr>

<tr><td><hr class="hr_default"></td></tr>
<tr><td>&nbsp;</td></tr>
<script type="text/javascript"> line_count=0; </script>
<!-- blockend ID=4449-->
<!-- block ID=4452-->

<!-- Display issue heading -->
<tr><th style="text-align: left">MM_MemMap - Item 4452 </th></tr>
<!-- Display issue field names and values -->

<tr><td><b>TEST_Test_Name:</b> MM_MemMap</td></tr>

<tr><td><b>TEST_Description:</b> <!-- MKS HTML -->The purpose of this 
test is to verify the Memory Manager (MM) Memory Mapped I/O commands of 
the Core Flight System (CFS). This test verifies that the Memory Mapped 
I/O commands function properly and that the MM application handles 
anomalies appropriately. Also, these commands are optional in the CFS. 
If the mission using the MM application does not support Memory Mapped 
I/O, this test can be eliminated from the test plan.</td></tr>

<tr><td><b>TEST_Current_Build:</b> 2.4.1.0</td></tr>

<tr><td><b>TEST_Execution_Assigned_To:</b> Walt Moleski (wmoleski)</td></tr>

<tr><td><b>TEST_Execution_Testbed:</b> cFE 6.5.0.0; OSAL 4.2.0.0; PSP 1.3.0.0</td></tr>

<tr><td><b>TEST_Execution_Checksum:</b> 50244</td></tr>

<tr><td><b>TEST_Execution_Completion_Date:</b> Nov 15, 2016</td></tr>

<tr><td><b>TEST_Execution_Time:</b> 1266.38 seconds or 21.1064 minutes</td></tr>

<tr><td><b>TEST_Execution_Comments:</b> <!-- MKS HTML -->All requirements passed.</td></tr>

<tr><td><b>TEST_Comments:</b> &nbsp;</td></tr>

<!-- Relationships info -->
<!-- Display relationship heading -->
<tr><td>DCRs Submitted / Tested and Requirements Validated</td></tr>


<tr><td class="detailheading" style="text-align: left">Links_To_TEST_from_DCRs_Backward,ALM_Validates:</td></tr>
<tr>
    <td>
        <table class="detailcols fullWidth">
        
        <tbody><tr>
            
            <th>ReqID</th>
            
            <th>Text</th>
            
            <th>Build Test Method</th>
            
            <th>REQ_Build_Sys_Test_Results</th>
            
            <th>REQ_Build_Sys_Test_Comments</th>
            
            <th>DCR_Title</th>
            
            <th>DCR_TEST_Outcome</th>
            
        </tr>
        <!-- block ID=4452-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM1006</td>
            
            <td><!-- MKS HTML -->For all MM commands, if the length 
contained in the message header is not equal to the expected length, MM 
shall reject the command.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the Cmds, EEPROM, MemMap and RAM tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4452-->
<!-- block ID=4452-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM1007</td>
            
            <td><!-- MKS HTML -->If the address specified in any MM command fails validation, MM shall reject the command</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM, MemMap, and RAM tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4452-->
<!-- block ID=4452-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM1008</td>
            
            <td><!-- MKS HTML -->If the filename specified in any MM command is not valid, MM shall reject the command</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM, MemMap, and RAM tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4452-->
<!-- block ID=4452-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM1009</td>
            
            <td><!-- MKS HTML -->If MM accepts any command as valid, MM 
shall execute the command, increment the MM Valid Command Counter and 
issue an event message</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4452-->
<!-- block ID=4452-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM1010</td>
            
            <td><!-- MKS HTML -->If MM rejects any command, MM shall 
abort the command execution, increment the MM Command Rejected Counter 
and issue an error event message</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in all tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4452-->
<!-- block ID=4452-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM5000</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Poke command , MM 
shall write &lt;PLATFORM_DEFINED&gt; bytes of data to the 
command-specified Memory Mapped I/O address</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4452-->
<!-- block ID=4452-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM5000.1</td>
            
            <td><!-- MKS HTML --><p>MM shall confirm a write to the Memory Mapped I/O address by issuing an event message which includes:</p><p>a) address written</p><p>b) length of data written</p><p>c) value of the data writte</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4452-->
<!-- block ID=4452-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM5002</td>
            
            <td><!-- MKS HTML --><p>Upon initialization of the MM Application, &nbsp; MM shall initialize the following data to Zero</p><p>a) Valid Command Counter</p><p>b) Command Rejected Counter</p><p>c) Last command executed</p><p>d) address for last command</p><p>e) Memory Type for last command</p><p>f) Number of bytes processed by last command</p><p>g) filename used in last command</p><p>h) fill pattern specified in last command (if command was a fill command)</p></td>
            
            <td>Analysis</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement is verified by looking
 in the logp file for the mm_memmap test procedure. The event text is 
printed each time the Peek command is issued. The Steps are 2.1; 2.4; 
2.5; 2.8; 2.9; and 2.12.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4452-->
<!-- block ID=4452-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM5004</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Read command, 
&nbsp;MM shall read the command-specified number of consecutive bytes 
from the command-specified Memory Mapped I/O memory address and generate
 an event message containing the data.</td>
            
            <td>Analysis</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement is verified by looking
 in the logp files for the mm_memmap test procedure. The event text is 
printed each time the Dump In Event command is issued. The Steps are 
3.4; 3.5; 5.2; 5.7; 5.10; 5.15; 5.18; and 5.23.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4452-->
<!-- block ID=4452-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM5004.1</td>
            
            <td><!-- MKS HTML -->If the number of bytes exceeds the maximum event message size then the command shall be rejected.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4452-->
<!-- block ID=4452-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM5100</td>
            
            <td><!-- MKS HTML --><p>Upon receipt of a Load from File 
command, MM shall load Memory mapped I/O, with interrupts enabled during
 the actual load, based on the following information contained in the 
command-specified "file:"</p><p>a) Destination Address</p><p>b) Destination Memory Type</p><p>c) &lt;MISSION_DEFINED&gt; CRC (data only)</p><p>d) Number of Bytes to Load</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4452-->
<!-- block ID=4452-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM5100.1</td>
            
            <td><!-- MKS HTML -->If the command-specified CRC fails validation, &nbsp;MM shall reject the command</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4452-->
<!-- block ID=4452-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM5100.2</td>
            
            <td><!-- MKS HTML -->If the number of bytes exceeds &lt;PLATFORM_DEFINED, TBD&gt; then the command shall be rejected.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4452-->
<!-- block ID=4452-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM5104</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Dump to File command,
 MM shall write the data associated with the command-specified Memory 
mapped I/O address, command-specified number of bytes and calculated 
&lt;MISSION_DEFINED&gt; CRC &nbsp;to the command-specified file.</td>
            
            <td>Analysis</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->The files from the memmap test were examined to verify they contained the correct data. They did.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4452-->
<!-- block ID=4452-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM5104.1</td>
            
            <td><!-- MKS HTML -->If the command-specified number of bytes exceeds &lt;PLATFORM_DEFINED, TBD&gt; then the command shall be rejected.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4452-->
<!-- block ID=4452-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM5300</td>
            
            <td><!-- MKS HTML --><p>Upon receipt of a Fill command, MM 
shall fill Memory mapped I/O with the contents based on the following 
command-specified parameters:</p><p>a) Destination Address</p><p>b) Destination Memory Type</p><p>c) Number of Bytes to Fill</p><p>d) 32-bit &nbsp;Fill Pattern</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4452-->
<!-- block ID=4452-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM5300.1</td>
            
            <td><!-- MKS HTML -->If the command-specified number of bytes exceeds &lt;PLATFORM_DEFINED, TBD&gt; then the command shall be rejected.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4452-->
<!-- block ID=4452-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM8000</td>
            
            <td><!-- MKS HTML --><p>MM shall generate a housekeeping message containing the following:</p><p>a) Valid Command Counter</p><p>b) Command Rejected Counter</p><p>c) Last command executed</p><p>d) Address for last command</p><p>e) Memory Type for last command</p><p>f) Number of bytes specified by last command</p><p>g) Filename used in last command</p><p>h) Data Value for last command (may be fill pattern or peek/poke value)</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in all tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4452-->
<!-- block ID=4452-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM9000</td>
            
            <td><!-- MKS HTML -->ADDD &nbsp; Upon initialization of the MM Application, &nbsp; MM shall initialize the following data to Zero</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in all tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4452-->

        </tbody></table>
    </td>
</tr>

<tr><td><hr class="hr_default"></td></tr>
<tr><td>&nbsp;</td></tr>
<script type="text/javascript"> line_count=0; </script>
<!-- blockend ID=4452-->
<!-- block ID=4451-->

<!-- Display issue heading -->
<tr><th style="text-align: left">MM_RAM - Item 4451 </th></tr>
<!-- Display issue field names and values -->

<tr><td><b>TEST_Test_Name:</b> MM_RAM</td></tr>

<tr><td><b>TEST_Description:</b> <!-- MKS HTML -->The purpose of this 
test is to verify the Memory Manager (MM) Random Access Memory (RAM) 
commands of the Core Flight System (CFS). This test verifies that the 
RAM commands function properly and that the MM application handles 
anomalies appropriately.</td></tr>

<tr><td><b>TEST_Current_Build:</b> 2.4.1.0</td></tr>

<tr><td><b>TEST_Execution_Assigned_To:</b> Walt Moleski (wmoleski)</td></tr>

<tr><td><b>TEST_Execution_Testbed:</b> cFE 6.5.0.0; OSAL 4.2.0.0; PSP 1.3.0.0</td></tr>

<tr><td><b>TEST_Execution_Checksum:</b> 50244</td></tr>

<tr><td><b>TEST_Execution_Completion_Date:</b> Nov 15, 2016</td></tr>

<tr><td><b>TEST_Execution_Time:</b> 812.088 seconds or 13.5348 minutes</td></tr>

<tr><td><b>TEST_Execution_Comments:</b> <!-- MKS HTML -->All requirements passed.</td></tr>

<tr><td><b>TEST_Comments:</b> &nbsp;</td></tr>

<!-- Relationships info -->
<!-- Display relationship heading -->
<tr><td>DCRs Submitted / Tested and Requirements Validated</td></tr>


<tr><td class="detailheading" style="text-align: left">Links_To_TEST_from_DCRs_Backward,ALM_Validates:</td></tr>
<tr>
    <td>
        <table class="detailcols fullWidth">
        
        <tbody><tr>
            
            <th>ReqID</th>
            
            <th>Text</th>
            
            <th>Build Test Method</th>
            
            <th>REQ_Build_Sys_Test_Results</th>
            
            <th>REQ_Build_Sys_Test_Comments</th>
            
            <th>DCR_Title</th>
            
            <th>DCR_TEST_Outcome</th>
            
        </tr>
        <!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM1006</td>
            
            <td><!-- MKS HTML -->For all MM commands, if the length 
contained in the message header is not equal to the expected length, MM 
shall reject the command.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the Cmds, EEPROM, MemMap and RAM tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM1007</td>
            
            <td><!-- MKS HTML -->If the address specified in any MM command fails validation, MM shall reject the command</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM, MemMap, and RAM tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM1008</td>
            
            <td><!-- MKS HTML -->If the filename specified in any MM command is not valid, MM shall reject the command</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM, MemMap, and RAM tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM1009</td>
            
            <td><!-- MKS HTML -->If MM accepts any command as valid, MM 
shall execute the command, increment the MM Valid Command Counter and 
issue an event message</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM1010</td>
            
            <td><!-- MKS HTML -->If MM rejects any command, MM shall 
abort the command execution, increment the MM Command Rejected Counter 
and issue an error event message</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in all tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM2000</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Poke command , MM shall write 8, 16, or 32 bits of data to the command-specified RAM address</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the RAM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM2000.1</td>
            
            <td><!-- MKS HTML --><p>MM shall confirm a write to the RAM address by issuing an event message which includes:</p><p>a) address written</p><p>b) length of data written</p><p>c) value of the data written</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the RAM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM2002</td>
            
            <td><!-- MKS HTML --><p>Upon receipt of a Peek command, 
&nbsp;MM shall read 8, 16, or 32 bits of data from the command-specified
 RAM address &nbsp;and generate an event message containing the 
following data:</p><p>a) address read</p><p>b) length of data read</p><p>c) value of the data rea</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the RAM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM2003</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Write With Interrupts
 Disable command, &nbsp;MM shall write up to &lt;PLATFORM_DEFINED, 
TBD&gt; bytes to the command-specified RAM memory address &nbsp;with 
interrupts disabled.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the RAM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM2003.1</td>
            
            <td><!-- MKS HTML -->MM shall verify that the command-specified &lt;MISSION_DEFINED&gt; CRC matches the computed CRC of the data</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the RAM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM2003.2</td>
            
            <td><!-- MKS HTML -->If the command-specified CRC fails validation, &nbsp;MM shall reject the command</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM2004</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Read command, 
&nbsp;MM shall read the command-specified number of consecutive bytes 
from the command-specified RAM memory address &nbsp;and generate an 
event message containing the data.</td>
            
            <td>Analysis</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the RAM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM2004.1</td>
            
            <td><!-- MKS HTML -->If the number of bytes exceeds the maximum event message size then the command shall be rejected.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM2100</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Load From File 
command, MM shall load RAM, with interrupts enabled during the actual 
load, based on the following information contained in the 
command-specified "file:" a) Destination Address b) Destination Memory 
Type c) &lt;MISSION_DEFINED&gt; CRC (data only) d) Number of Bytes to 
Load</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the RAM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM2100.1</td>
            
            <td><!-- MKS HTML -->If the CRC contained in the file fails validation, &nbsp;MM shall reject the command</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM2100.2</td>
            
            <td><!-- MKS HTML -->If the number of bytes exceeds &lt;PLATFORM_DEFINED, TBD&gt; then the command shall be rejected.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM2104</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Dump to File command,
 MM shall write the data associated with the command-specified RAM 
address , command-specified number of bytes and calculated 
&lt;MISSION_DEFINED&gt; CRC &nbsp;to the command-specified file.</td>
            
            <td>Analysis</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the RAM and 
SymTab tests. The files from each test were analyzed to verify they 
contained the correct data. They did.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM2104.1</td>
            
            <td><!-- MKS HTML -->If the command-specified number of bytes exceeds &lt;PLATFORM_DEFINED, TBD&gt; then the command shall be rejected.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM2300</td>
            
            <td><!-- MKS HTML --><p>Upon receipt of a Fill command, MM shall fill RAM with the contents based on the following command-specified parameters:</p><p>a) Destination Address &nbsp;</p><p>b) Destination Memory Type</p><p>c) Number of Bytes to Fill</p><p>d) 32-bit &nbsp;Fill Pattern</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the RAM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM2300.1</td>
            
            <td><!-- MKS HTML -->If the command-specified number of bytes exceeds &lt;PLATFORM_DEFINED, TBD&gt; then the command shall be rejected.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM2500</td>
            
            <td><!-- MKS HTML -->When writing data to RAM memory, MM shall write a maximum of &lt;PLATFORM_DEFINED, TBD&gt; bytes &nbsp;per execution cycle</td>
            
            <td>Analysis</td>
            
            <td>Partial Pass</td>
            
            <td><!-- MKS HTML -->To verify this requirement, the ES 
Performance Analysis Monitor was started before performing a load from 
file command. After the command completed, the Performance Analysis data
 capture was stopped and the file transferred to the ground. The 
analysis of this file requires a Performance Analysis data viewing tool 
that is no longer available. The MM_SEGBREAK_PERF_ID marker should 
contain data to verify segmentation was occurring. This tool was last 
available for MM 2.3.0.0. Below are the comments from the 2.3.0.0 test 
that fully passed this requirement. &nbsp;The performance analysis log 
was turned on to test this requirement. The resulting performance data 
was analyzed to determine if there was any data for the 
MM_SEGBREAK_PERF_ID marker. The file contained a block of data that had 
numerous spikes which indicates that the Memory Manager task was 
performing segmentation.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM2501</td>
            
            <td><!-- MKS HTML -->When writing RAM data to a file, MM shall write a maximum of &lt;PLATFORM_DEFINED, TBD&gt; bytes per execution cycle</td>
            
            <td>Analysis</td>
            
            <td>Partial Pass</td>
            
            <td><!-- MKS HTML -->To verify this requirement, the ES 
Performance Analysis was started before performing a dump to file 
command. After the command completed, the Performance Analysis data 
capture was stopped and the file transferred to the ground. The analysis
 of this file requires a Performance Analysis data viewing tool that is 
no longer available. The MM_SEGBREAK_PERF_ID marker should contain data 
to verify segmentation was occurring. This tool was last available for 
MM 2.3.0.0. Below are the comments from the 2.3.0.0 test that fully 
passed this requirement. &nbsp; The performance analysis log was turned 
on to test this requirement. The resulting performance data was analyzed
 to determine if there was any data for the MM_SEGBREAK_PERF_ID marker. 
The file contained a block of data that had numerous spikes which 
indicates that the Memory Manager task was performing segmentation.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM8000</td>
            
            <td><!-- MKS HTML --><p>MM shall generate a housekeeping message containing the following:</p><p>a) Valid Command Counter</p><p>b) Command Rejected Counter</p><p>c) Last command executed</p><p>d) Address for last command</p><p>e) Memory Type for last command</p><p>f) Number of bytes specified by last command</p><p>g) Filename used in last command</p><p>h) Data Value for last command (may be fill pattern or peek/poke value)</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in all tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->
<!-- block ID=4451-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM9000</td>
            
            <td><!-- MKS HTML -->ADDD &nbsp; Upon initialization of the MM Application, &nbsp; MM shall initialize the following data to Zero</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in all tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4451-->

        </tbody></table>
    </td>
</tr>

<tr><td><hr class="hr_default"></td></tr>
<tr><td>&nbsp;</td></tr>
<script type="text/javascript"> line_count=0; </script>
<!-- blockend ID=4451-->
<!-- block ID=4453-->

<!-- Display issue heading -->
<tr><th style="text-align: left">MM_SymbolTable - Item 4453 </th></tr>
<!-- Display issue field names and values -->

<tr><td><b>TEST_Test_Name:</b> MM_SymbolTable</td></tr>

<tr><td><b>TEST_Description:</b> <!-- MKS HTML -->The purpose of this 
test is to verify the Memory Manager (MM) Symbol Table functionality of 
the Core Flight System (CFS). Symbol Table support is optional and thus 
provided in a separate test. If the mission provides Symbol Table 
support, this test can be used to verify its functionality.</td></tr>

<tr><td><b>TEST_Current_Build:</b> 2.4.1.0</td></tr>

<tr><td><b>TEST_Execution_Assigned_To:</b> Walt Moleski (wmoleski)</td></tr>

<tr><td><b>TEST_Execution_Testbed:</b> cFE 6.5.0.0; OSAL 4.2.0.0; PSP 1.3.0.0</td></tr>

<tr><td><b>TEST_Execution_Checksum:</b> 50244</td></tr>

<tr><td><b>TEST_Execution_Completion_Date:</b> Nov 15, 2016</td></tr>

<tr><td><b>TEST_Execution_Time:</b> 628.151 seconds or 10.4692 minutes</td></tr>

<tr><td><b>TEST_Execution_Comments:</b> <!-- MKS HTML -->All requirements passed.</td></tr>

<tr><td><b>TEST_Comments:</b> &nbsp;</td></tr>

<!-- Relationships info -->
<!-- Display relationship heading -->
<tr><td>DCRs Submitted / Tested and Requirements Validated</td></tr>


<tr><td class="detailheading" style="text-align: left">Links_To_TEST_from_DCRs_Backward,ALM_Validates:</td></tr>
<tr>
    <td>
        <table class="detailcols fullWidth">
        
        <tbody><tr>
            
            <th>ReqID</th>
            
            <th>Text</th>
            
            <th>Build Test Method</th>
            
            <th>REQ_Build_Sys_Test_Results</th>
            
            <th>REQ_Build_Sys_Test_Comments</th>
            
            <th>DCR_Title</th>
            
            <th>DCR_TEST_Outcome</th>
            
        </tr>
        <!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM1009</td>
            
            <td><!-- MKS HTML -->If MM accepts any command as valid, MM 
shall execute the command, increment the MM Valid Command Counter and 
issue an event message</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM1010</td>
            
            <td><!-- MKS HTML -->If MM rejects any command, MM shall 
abort the command execution, increment the MM Command Rejected Counter 
and issue an error event message</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in all tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM1011</td>
            
            <td><!-- MKS HTML -->&lt;OPTIONAL&gt; &nbsp;Symbol Name and offset can be used in lieu an absolute address in any RAM command</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM1012</td>
            
            <td><!-- MKS HTML -->&lt;OPTIONAL&gt; &nbsp;Symbol Name and offset can be used in lieu an absolute address in any EEPROM command</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM1013</td>
            
            <td><!-- MKS HTML -->The MM application shall generate an 
error event message if symbol table operations are initiated but not 
supported in the current target environment.</td>
            
            <td>Inspection</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement is set to "U" in cmds 
and symtab since vxworks now implements Symbol Table Operations. The MM 
code to handle the Symbol Table Dump command did not change but the 
underlying OSAL code now creates the specified file if it is valid. 
Previous OSAL versions returned an error of OS_ERR_NOT_IMPLEMENTED.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM2000</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Poke command , MM shall write 8, 16, or 32 bits of data to the command-specified RAM address</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the RAM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM2000.1</td>
            
            <td><!-- MKS HTML --><p>MM shall confirm a write to the RAM address by issuing an event message which includes:</p><p>a) address written</p><p>b) length of data written</p><p>c) value of the data written</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the RAM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM2002</td>
            
            <td><!-- MKS HTML --><p>Upon receipt of a Peek command, 
&nbsp;MM shall read 8, 16, or 32 bits of data from the command-specified
 RAM address &nbsp;and generate an event message containing the 
following data:</p><p>a) address read</p><p>b) length of data read</p><p>c) value of the data rea</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the RAM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM2003</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Write With Interrupts
 Disable command, &nbsp;MM shall write up to &lt;PLATFORM_DEFINED, 
TBD&gt; bytes to the command-specified RAM memory address &nbsp;with 
interrupts disabled.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the RAM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM2003.1</td>
            
            <td><!-- MKS HTML -->MM shall verify that the command-specified &lt;MISSION_DEFINED&gt; CRC matches the computed CRC of the data</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the RAM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM2004</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Read command, 
&nbsp;MM shall read the command-specified number of consecutive bytes 
from the command-specified RAM memory address &nbsp;and generate an 
event message containing the data.</td>
            
            <td>Analysis</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the RAM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM2100</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Load From File 
command, MM shall load RAM, with interrupts enabled during the actual 
load, based on the following information contained in the 
command-specified "file:" a) Destination Address b) Destination Memory 
Type c) &lt;MISSION_DEFINED&gt; CRC (data only) d) Number of Bytes to 
Load</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the RAM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM2104</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Dump to File command,
 MM shall write the data associated with the command-specified RAM 
address , command-specified number of bytes and calculated 
&lt;MISSION_DEFINED&gt; CRC &nbsp;to the command-specified file.</td>
            
            <td>Analysis</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the RAM and 
SymTab tests. The files from each test were analyzed to verify they 
contained the correct data. They did.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM2300</td>
            
            <td><!-- MKS HTML --><p>Upon receipt of a Fill command, MM shall fill RAM with the contents based on the following command-specified parameters:</p><p>a) Destination Address &nbsp;</p><p>b) Destination Memory Type</p><p>c) Number of Bytes to Fill</p><p>d) 32-bit &nbsp;Fill Pattern</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the RAM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM3000</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Poke command , MM shall write 8, 16, or 32 bits of data to the command-specified EEPROM address</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM3000.1</td>
            
            <td><!-- MKS HTML --><p>MM shall confirm a write to the EEPROM address &nbsp;by issuing an event message which includes:</p><p>a) address written</p><p>b) length of data written</p><p>c) value of the data written</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM3001</td>
            
            <td><!-- MKS HTML --><p>Upon receipt of a Peek command, 
&nbsp;MM shall read 8, 16, or 32 bits of data from the command-specified
 EEPROM address &nbsp;and generate an event message containing the 
following data:</p><p>a) address read</p><p>b) length of data read</p><p>c) value of the data read</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM3002</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Read command, 
&nbsp;MM shall read the command-specified number of consecutive bytes 
from the command-specified EEPROM memory address &nbsp;and generate an 
event message containing the data.</td>
            
            <td>Analysis</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM3100</td>
            
            <td><!-- MKS HTML --><p>Upon receipt of a Load from File 
command, MM shall load EEPROM memory based on the following information 
contained in the command-specified "file:"</p><p>a) Destination Address</p><p>b) Destination Memory Type</p><p>c) &lt;MISSION_DEFINED&gt; CRC (data only)</p><p>d) Number of Bytes to Load</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM3104</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Dump to File command,
 MM shall write the data associated with the command-specified EEPROM 
address ,command-specified number of bytes and calculated 
&lt;MISSION_DEFINED&gt; CRC to the command-specified file.</td>
            
            <td>Analysis</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM 
and SymTab tests. The files from each test were examined to verify they 
contained the correct data. They did.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM3200</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Fill command, MM 
shall fill EEPROM memory with the contents based on the following 
command-specified parameters: a) Destination Address b) Destination 
Memory Type c) Number of Bytes to Fill d) 32-bit &nbsp;Fill Pattern</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in the EEPROM and SymTab tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM3400</td>
            
            <td><!-- MKS HTML -->Upon receipt of an Enable EEPROM command, MM shall enable the command specified bank of EEPROM for writing.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM3500</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Disable EEPROM command, MM shall disable/lock the command specified bank of EEPROM from being written to.</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM7001</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Write Symbol Table command, MM shall save the system symbol table to an onboard data file</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM7002</td>
            
            <td><!-- MKS HTML -->Upon receipt of a Symbol-to-Address 
command, MM shall report the resolved address in telemetry for the 
command-specified symbol name</td>
            
            <td>Analysis</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement is tested in Steps 2.6 and 2.17 of the symtab test procedure.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM7004</td>
            
            <td><!-- MKS HTML -->The MM application shall generate an 
error event and abort the current operation if any symbolic name 
argument cannot be resolved to a valid address</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="odd_row">
            
            <td>MM8000</td>
            
            <td><!-- MKS HTML --><p>MM shall generate a housekeeping message containing the following:</p><p>a) Valid Command Counter</p><p>b) Command Rejected Counter</p><p>c) Last command executed</p><p>d) Address for last command</p><p>e) Memory Type for last command</p><p>f) Number of bytes specified by last command</p><p>g) Filename used in last command</p><p>h) Data Value for last command (may be fill pattern or peek/poke value)</p></td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in all tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->
<!-- block ID=4453-->

		
        
        <!-- Display relationship issue field headings -->
        
        
        <!-- Display relationship issue field values -->
		<script type="text/javascript"> writeEvenOddTRTag(); </script><tr class="even_row">
            
            <td>MM9000</td>
            
            <td><!-- MKS HTML -->ADDD &nbsp; Upon initialization of the MM Application, &nbsp; MM shall initialize the following data to Zero</td>
            
            <td>Demonstration</td>
            
            <td>Pass</td>
            
            <td><!-- MKS HTML -->This requirement passed in all tests.</td>
            
            <td>&nbsp;</td>
            
            <td>&nbsp;</td>
            
        </tr>
        <!-- blockend ID=4453-->

        </tbody></table>
    </td>
</tr>

<tr><td><hr class="hr_default"></td></tr>
<tr><td>&nbsp;</td></tr>
<script type="text/javascript"> line_count=0; </script>
<!-- blockend ID=4453-->

</tbody></table>
<center class="footer"></center>

</body></html>