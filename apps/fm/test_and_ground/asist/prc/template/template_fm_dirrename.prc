PROC $sc_$cpu_fm_dirrename
;*******************************************************************************
;  Test Name:  FM_DirRename
;  Test Level: Build Verification 
;  Test Type:  Functional
;		     
;  Test Description
;   The purpose of this test is to verify that the File Manager (FM) does not
;   cause any erroneous things to happen when a directory is renamed.
;
;  Change History
;
;	Date	   Name		Description
;	01/08/09   W. Moleski	Initial procedure
;	01/26/10   W. Moleski	Updated for FM 2.1.0.0
;       02/28/11   W. Moleski   Added variables for App name and ram directory
;       01/18/17   W. Moleski   Updated for FM 2.5.0.0 using CPU1 for commanding
;                               and added a hostCPU variable for the utility
;                               procs to connect to the proper host IP address.
;
;  Arguments
;	None
;
;**********************************************************************

local logging = %liv (log_procedure)
%liv (log_procedure) = FALSE

#include "ut_statusdefs.h"
#include "fm_platform_cfg.h"
#include "fm_events.h"
#include "tst_fm_events.h"

%liv (log_procedure) = logging

local FMAppName = FM_APP_NAME
local ramDir = "/ram"
local ramDirPhys = "RAM:0"
local hostCPU = "$CPU"

local cmdctr
local errcnt

write ";*********************************************************************"
write ";  Step 1.0: Initialize the CPU for this test. "
write ";*********************************************************************"
write ";  Step 1.1: Command a Power-On Reset on $CPU. "
write ";********************************************************************"
/$SC_$CPU_ES_POWERONRESET
wait 10

close_data_center
wait 60
                                                                                
cfe_startup {hostCPU}
wait 5

write ";*********************************************************************"
write ";  Step 1.2: Create the FreeSpace table load image and start the "
write ";  File Manager (FM) and Test (TST_FM) Applications. "
write ";********************************************************************"
s $sc_$cpu_fm_tableloadfile
wait 5

s ftp_file ("CF:0/apps", "$cpu_fmdevtbl_ld_1", FM_TABLE_FILENAME, hostCPU, "P")
wait 5

s $sc_$cpu_fm_startfmapps
wait 5

write ";*********************************************************************"
write ";  Step 1.3: Verify that the FM Housekeeping telemetry items are "
write ";  initialized to zero (0). "
write ";*********************************************************************"
local hkPktId

;; Set the FM HK packet ID based upon the cpu being used
;; CPU1 is the default
hkPktId = "p08A"

;; Verify the HK Packet is getting generated by waiting for the
;; sequencecount to increment twice
local seqTlmItem = hkPktId & "scnt"
local currSCnt = {seqTlmItem}
local expectedSCnt = currSCnt + 2

ut_tlmwait {seqTlmItem}, {expectedSCnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - Housekeeping packet is being generated."
else
  write "<!> Failed - Housekeeping packet sequence count did not increment. Housekeeping packet is not being recieved."
endif

wait 5

write ";*********************************************************************"
write ";  Step 2.0: File System Preparation."
write ";*********************************************************************"
write ";  Step 2.1: Send Create Directory Command to Create Test Directory 1."
write ";*********************************************************************"
cmdCtr = $SC_$CPU_FM_CMDPC + 1

/$SC_$CPU_FM_DirCreate DirName=ramDir & "/test_dir"

ut_tlmwait  $SC_$CPU_FM_CMDPC, {cmdCtr}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - Create Directory command sent properly."
else
  write "<!> Failed - Create Directory command not sent properly."
endif

wait 5

write ";*********************************************************************"
write ";  Step 2.2: Upload Test File to test Directory 1."
write ";*********************************************************************"
;; Upload the Test file
s ftp_file (ramDirPhys & "/test_dir","FMRENAME1.TST","test_file.dat",hostCPU,"P")
wait 5

write ";*********************************************************************"
write ";  Step 2.3:  Open the Test File."
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "TST_FM", TST_FM_OPENFILE_INF_EID, "INFO", 1

cmdctr = $SC_$CPU_TST_FM_CMDPC + 1

/$SC_$CPU_TST_FM_Open File=ramDir & "/test_dir/test_file.dat"

ut_tlmwait $SC_$CPU_TST_FM_CMDPC, {cmdctr}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - File Open command sent properly"
else
  write "<!> Failed - Did not Open file '",ramdir,"/test_dir/test_file.dat'"
endif

wait 5

write ";*********************************************************************"
write ";  Step 2.4: Send the List Open Files command."
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", {FMAppName}, FM_GET_OPEN_FILES_CMD_EID, "DEBUG", 1

cmdCtr = $SC_$CPU_FM_CMDPC + 1

/$SC_$CPU_FM_ListOpenFiles

ut_tlmwait  $SC_$CPU_FM_CMDPC, {cmdCtr}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - ListOpenFiles command sent properly."
else
  write "<!> Failed - ListOpenFiles command not sent properly."
endif

wait 5

write ";*********************************************************************"
write ";  Step 2.5: Rename the directory. This should fail. "
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", {FMAppName}, FM_RENAME_SRC_ERR_EID, "ERROR", 1

errcnt = $SC_$CPU_FM_CMDEC + 1

/$SC_$CPU_FM_FileRename File=ramDir & "/test_dir" DestName=ramDir & "/renamedDir"

ut_tlmwait  $SC_$CPU_FM_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - Directory Rename command failed as expected."
else
  write "<!> Failed - Directory Renamed when failure was expected."
endif

wait 5

write ";*********************************************************************"
write ";  Step 2.6: File Info Command to Verify the test Directory still exists"
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", {FMAppName}, FM_GET_FILE_INFO_CMD_EID, "DEBUG", 1

cmdCtr = $SC_$CPU_FM_CMDPC + 1

s $sc_$cpu_fm_fileinfodisplay (ramDir & "/test_dir")

if (cmdCtr = $SC_$CPU_FM_CMDPC) then
  write "<*> Passed - File Info command sent properly"

  ;; Check the File Status field - Not Used indicates the file does not exist
  if (p@$SC_$CPU_FM_FileStatus = "Directory") then
    write "<*> Passed - Directory still exists."
  else
    write "<!> Failed - Test directory does not exist."
  endif
else
  write "<!> Failed - File Info command incremented the CMDEC."
endif

wait 5

write ";*********************************************************************"
write ";  Step 2.7: File Info Command to Verify the renamed Directory does not"
write ";  exist. "
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", {FMAppName}, FM_GET_FILE_INFO_CMD_EID, "DEBUG", 1

cmdCtr = $SC_$CPU_FM_CMDPC + 1

s $sc_$cpu_fm_fileinfodisplay (ramDir & "/renamedDir")

if (cmdCtr = $SC_$CPU_FM_CMDPC ) then
  write "<*> Passed - File Info command sent properly"

  ;; Check the File Status field - Not Used indicates the file does not exist
  if (p@$SC_$CPU_FM_FileStatus = "Not Used") then
    write "<*> Passed - Directory '",ramDir,"/renamedDir' does not exist."
  else
    write "<!> Failed - Renamed directory exists."
  endif
else
  write "<!> Failed - File Info command incremented the CMDEC."
endif

wait 5

write ";*********************************************************************"
write ";  Step 2.8: Close the File opened in Step 2.3. specifying the new "
write ";  directory name. This should fail. "
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "TST_FM", TST_FM_CLOSEFILE_INF_EID, "INFO", 1

errcnt = $SC_$CPU_TST_FM_CMDEC + 1

/$SC_$CPU_TST_FM_Close File=ramDir & "/renamedDir/test_file.dat"

ut_tlmwait $SC_$CPU_TST_FM_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - File Close command for '",ramDir,"/renamedDir/test_file.dat' did not find the file."
else
  write "<!> Failed - File Close command '",ramDir,"/renamedDir/test_file.dat' succeeded when failure was expected."
endif

wait 5

write ";*********************************************************************"
write ";  Step 2.9: Close the File opened in Step 2.3. specifying the original "
write ";  directory name. "
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "TST_FM", TST_FM_CLOSEFILE_INF_EID, "INFO", 1

cmdctr = $SC_$CPU_TST_FM_CMDPC + 1

/$SC_$CPU_TST_FM_Close File=ramDir & "/test_dir/test_file.dat"

ut_tlmwait $SC_$CPU_TST_FM_CMDPC, {cmdctr}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - File Close command sent properly for '",ramDir,"/test_dir/test_file.dat'."
else
  write "<!> Failed - Did not Close file '",ramDir,"/test_dir/test_file.dat'"
endif

wait 5

write ";*********************************************************************"
write ";  Step 2.10: Send the List Open Files command."
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", {FMAppName}, FM_OPEN_FILE_LIST_CMD_EID, "DEBUG", 1

cmdCtr = $SC_$CPU_FM_CMDPC + 1

/$SC_$CPU_FM_ListOpenFiles

ut_tlmwait  $SC_$CPU_FM_CMDPC, {cmdCtr}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - ListOpenFiles command sent properly."
else
  write "<!> Failed - ListOpenFiles command not sent properly."
endif

wait 5

write ";*********************************************************************"
write ";  Step 3.0:  Perform a Power-on Reset to clean-up from this test."
write ";*********************************************************************"
/$SC_$CPU_ES_POWERONRESET
wait 10

close_data_center
wait 60
                                                                                
cfe_startup {hostCPU}
wait 5

write ";*********************************************************************"
write ";  End procedure $sc_$cpu_fm_dirrename                                "
write ";*********************************************************************"
ENDPROC
