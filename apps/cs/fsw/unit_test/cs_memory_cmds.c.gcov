        -:    0:Source:../src/cs_memory_cmds.c
        -:    0:Programs:9
        -:    1:/************************************************************************
        -:    2: ** File:
        -:    3: **   $Id: cs_memory_cmds.c.gcov 1.5 2017/03/29 19:31:18EDT mdeschu Exp  $
        -:    4: **
        -:    5: **   Copyright (c) 2007-2014 United States Government as represented by the 
        -:    6: **   Administrator of the National Aeronautics and Space Administration. 
        -:    7: **   All Other Rights Reserved.  
        -:    8: **
        -:    9: **   This software was created at NASA's Goddard Space Flight Center.
        -:   10: **   This software is governed by the NASA Open Source Agreement and may be 
        -:   11: **   used, distributed and modified only pursuant to the terms of that 
        -:   12: **   agreement.
        -:   13: **
        -:   14: ** Purpose: 
        -:   15: **   The CFS Checksum (CS) Application's commands for checking Memory
        -:   16: **
        -:   17: *************************************************************************/
        -:   18:
        -:   19:/**************************************************************************
        -:   20: **
        -:   21: ** Include section
        -:   22: **
        -:   23: **************************************************************************/
        -:   24:#include "cfe.h"
        -:   25:#include "cs_tbldefs.h"
        -:   26:#include "cs_app.h"
        -:   27:#include "cs_events.h"
        -:   28:#include "cs_compute.h"
        -:   29:#include "cs_memory_cmds.h"
        -:   30:#include "cs_utils.h"
        -:   31:
        -:   32:/**************************************************************************
        -:   33: **
        -:   34: ** Functions
        -:   35: **
        -:   36: **************************************************************************/
        -:   37:
        -:   38:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   39:/*                                                                 */
        -:   40:/* CS Disable background checking of Memory command                */
        -:   41:/*                                                                 */
        -:   42:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        2:   43:void CS_DisableMemoryCmd(CFE_SB_MsgPtr_t MessagePtr)
        -:   44:{
        -:   45:    /* command verification variables */
        2:   46:    uint16                                  ExpectedLength = sizeof(CS_NoArgsCmd_t);
        -:   47:    
        -:   48:    /* Verify command packet length */
        2:   49:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength) )
        -:   50:    {
        2:   51:        CS_AppData.MemoryCSState = CS_STATE_DISABLED;
        2:   52:        CS_ZeroMemoryTempValues();
        -:   53:        
        -:   54:#if (CS_PRESERVE_STATES_ON_PROCESSOR_RESET == TRUE)
        2:   55:        CS_UpdateCDS();
        -:   56:#endif
        -:   57:        
        2:   58:        CFE_EVS_SendEvent (CS_DISABLE_MEMORY_INF_EID,
        -:   59:                           CFE_EVS_INFORMATION,
        -:   60:                           "Checksumming of Memory is Disabled");
        -:   61:        
        2:   62:        CS_AppData.CmdCounter++;
        -:   63:    }
        2:   64:    return;
        -:   65:} /* End of CS_DisableMemoryCmd () */
        -:   66:
        -:   67:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   68:/*                                                                 */
        -:   69:/* CS Enable background checking of Memory command                 */
        -:   70:/*                                                                 */
        -:   71:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        2:   72:void CS_EnableMemoryCmd(CFE_SB_MsgPtr_t MessagePtr)
        -:   73:{
        -:   74:    /* command verification variables */
        2:   75:    uint16                                  ExpectedLength = sizeof(CS_NoArgsCmd_t);
        -:   76:    
        -:   77:    /* Verify command packet length */
        2:   78:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength) )
        -:   79:    {
        2:   80:        CS_AppData.MemoryCSState = CS_STATE_ENABLED;
        -:   81:        
        -:   82:        
        -:   83:#if (CS_PRESERVE_STATES_ON_PROCESSOR_RESET == TRUE)
        2:   84:        CS_UpdateCDS();
        -:   85:#endif
        -:   86:        
        2:   87:        CFE_EVS_SendEvent (CS_ENABLE_MEMORY_INF_EID,
        -:   88:                           CFE_EVS_INFORMATION,
        -:   89:                           "Checksumming of Memory is Enabled");
        -:   90:        
        2:   91:        CS_AppData.CmdCounter++;
        -:   92:    }
        2:   93:    return;
        -:   94:} /* End of CS_EnableMemoryCmd () */
        -:   95:
        -:   96:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   97:/*                                                                 */
        -:   98:/* CS Report the baseline checksum of an entry in the Memory table */
        -:   99:/*                                                                 */
        -:  100:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        5:  101:void CS_ReportBaselineEntryIDMemoryCmd(CFE_SB_MsgPtr_t MessagePtr)
        -:  102:{
        -:  103:    /* command verification variables */
        5:  104:    uint16                                  ExpectedLength = sizeof(CS_EntryCmd_t);
        5:  105:    CS_EntryCmd_t                         * CmdPtr         = NULL;
        5:  106:    CS_Res_EepromMemory_Table_Entry_t     * ResultsEntry   = NULL; 
        5:  107:    uint32                                  Baseline       = 0;
        5:  108:    uint16                                  EntryID        = 0;
        5:  109:    uint16                                  State          = CS_STATE_EMPTY;
        -:  110:    
        -:  111:    /* Verify command packet length */
        5:  112:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength) )
        -:  113:    {
        4:  114:        CmdPtr = (CS_EntryCmd_t *) MessagePtr;
        4:  115:        EntryID = CmdPtr -> EntryID;
        -:  116:        
        9:  117:        if ((EntryID < CS_MAX_NUM_MEMORY_TABLE_ENTRIES) &&
        3:  118:            (CS_AppData.ResMemoryTblPtr[EntryID].State != CS_STATE_EMPTY) )
        -:  119:        {
        2:  120:            ResultsEntry = &CS_AppData.ResMemoryTblPtr[EntryID];
        -:  121:            
        2:  122:            if (ResultsEntry->ComputedYet == TRUE)
        -:  123:            {
        1:  124:                Baseline = ResultsEntry->ComparisonValue;
        -:  125:                
        1:  126:                CFE_EVS_SendEvent (CS_BASELINE_MEMORY_INF_EID,
        -:  127:                                   CFE_EVS_INFORMATION,
        -:  128:                                   "Report baseline of Memory Entry %d is 0x%08X", 
        -:  129:                                   EntryID,
        -:  130:                                   (unsigned int)Baseline);
        -:  131:            }
        -:  132:            else
        -:  133:            {
        1:  134:                CFE_EVS_SendEvent (CS_NO_BASELINE_MEMORY_INF_EID,
        -:  135:                                   CFE_EVS_INFORMATION,
        -:  136:                                   "Report baseline of Memory Entry %d has not been computed yet", 
        -:  137:                                   EntryID);   
        -:  138:            }
        2:  139:            CS_AppData.CmdCounter++;
        -:  140:        }
        -:  141:        else
        -:  142:        {
        2:  143:            if (EntryID >= CS_MAX_NUM_MEMORY_TABLE_ENTRIES)
        -:  144:            {
        1:  145:                State = CS_STATE_UNDEFINED;
        -:  146:            }
        -:  147:            else
        -:  148:            {
        1:  149:                State = CS_AppData.ResMemoryTblPtr[EntryID].State;
        -:  150:            }
        -:  151:            
        2:  152:            CFE_EVS_SendEvent (CS_BASELINE_INVALID_ENTRY_MEMORY_ERR_EID,
        -:  153:                               CFE_EVS_ERROR,
        -:  154:                               "Memory report baseline failed, Entry ID invalid: %d, State: %d Max ID: %d",
        -:  155:                               EntryID,
        -:  156:                               State,
        -:  157:                               (CS_MAX_NUM_MEMORY_TABLE_ENTRIES - 1));
        2:  158:            CS_AppData.CmdErrCounter++;
        -:  159:        }
        -:  160:    }
        5:  161:    return;
        -:  162:} /* End of CS_ReportBaselineEntryIDCmd () */
        -:  163:
        -:  164:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  165:/*                                                                 */
        -:  166:/* CS Recompute the baseline of an entry in the Memory table cmd   */
        -:  167:/*                                                                 */
        -:  168:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        6:  169:void CS_RecomputeBaselineMemoryCmd (CFE_SB_MsgPtr_t MessagePtr)
        -:  170:{
        -:  171:    /* command verification variables */
        6:  172:    uint16                                  ExpectedLength = sizeof(CS_EntryCmd_t);
        6:  173:    uint32                                  ChildTaskID    = 0;
        6:  174:    int32                                   Status         = -1;  /* Init to OS error */
        6:  175:    CS_EntryCmd_t                         * CmdPtr         = NULL;
        6:  176:    uint16                                  EntryID        = 0;
        6:  177:    uint16                                  State          = CS_STATE_EMPTY;
        -:  178:    
        -:  179:    /* Verify command packet length */
        6:  180:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength) )
        -:  181:    {
        5:  182:        CmdPtr = (CS_EntryCmd_t *) MessagePtr;
        5:  183:        EntryID = CmdPtr -> EntryID;
        -:  184:        
        -:  185:        
        9:  186:        if (CS_AppData.RecomputeInProgress == FALSE && CS_AppData.OneShotInProgress == FALSE)
        -:  187:        {
        -:  188:
        -:  189:            
        -:  190:            /* make sure the entry is a valid number and is defined in the table */
        9:  191:            if ((EntryID < CS_MAX_NUM_MEMORY_TABLE_ENTRIES) &&
        3:  192:                (CS_AppData.ResMemoryTblPtr[EntryID].State != CS_STATE_EMPTY) )
        -:  193:            {
        -:  194:
        -:  195:                /* There is no child task running right now, we can use it*/
        2:  196:                CS_AppData.RecomputeInProgress           = TRUE;
        -:  197:                
        -:  198:                /* fill in child task variables */
        2:  199:                CS_AppData.ChildTaskTable                = CS_MEMORY_TABLE;
        2:  200:                CS_AppData.ChildTaskEntryID              = EntryID;
        -:  201:                
        -:  202:                
        2:  203:                CS_AppData.RecomputeEepromMemoryEntryPtr = &CS_AppData.ResMemoryTblPtr[EntryID];
        -:  204:                
        2:  205:                Status= CFE_ES_CreateChildTask(&ChildTaskID,
        -:  206:                                               CS_RECOMP_MEMORY_TASK_NAME,
        -:  207:                                               CS_RecomputeEepromMemoryChildTask,
        -:  208:                                               NULL,
        -:  209:                                               CFE_ES_DEFAULT_STACK_SIZE,
        -:  210:                                               CS_CHILD_TASK_PRIORITY,
        -:  211:                                               0);
        2:  212:                if (Status ==CFE_SUCCESS)
        -:  213:                {
        1:  214:                    CFE_EVS_SendEvent (CS_RECOMPUTE_MEMORY_STARTED_DBG_EID,
        -:  215:                                       CFE_EVS_DEBUG,
        -:  216:                                       "Recompute baseline of Memory Entry ID %d started", 
        -:  217:                                       EntryID);
        1:  218:                    CS_AppData.CmdCounter++;
        -:  219:                }
        -:  220:                else/* child task creation failed */
        -:  221:                {
        1:  222:                    CFE_EVS_SendEvent (CS_RECOMPUTE_MEMORY_CREATE_CHDTASK_ERR_EID,
        -:  223:                                       CFE_EVS_ERROR,
        -:  224:                                       "Recompute baseline of Memory Entry ID %d failed, ES_CreateChildTask returned:  0x%08X",
        -:  225:                                       EntryID,
        -:  226:                                       (unsigned int)Status);
        1:  227:                    CS_AppData.CmdErrCounter++;
        1:  228:                    CS_AppData.RecomputeInProgress = FALSE;
        -:  229:                }
        -:  230:            }
        -:  231:            else
        -:  232:            {
        2:  233:                if (EntryID >= CS_MAX_NUM_MEMORY_TABLE_ENTRIES)
        -:  234:                {
        1:  235:                    State = CS_STATE_UNDEFINED;
        -:  236:                }
        -:  237:                else
        -:  238:                {
        1:  239:                    State = CS_AppData.ResMemoryTblPtr[EntryID].State;
        -:  240:                }
        -:  241:            
        2:  242:                CFE_EVS_SendEvent (CS_RECOMPUTE_INVALID_ENTRY_MEMORY_ERR_EID,
        -:  243:                                   CFE_EVS_ERROR,
        -:  244:                                   "Memory recompute baseline of entry failed, Entry ID invalid: %d, State: %d, Max ID: %d",
        -:  245:                                   EntryID,
        -:  246:                                   State,
        -:  247:                                   (CS_MAX_NUM_MEMORY_TABLE_ENTRIES - 1));
        -:  248:                
        2:  249:                CS_AppData.CmdErrCounter++;
        -:  250:            }
        -:  251:        }
        -:  252:        else
        -:  253:        {
        -:  254:            /*send event that we can't start another task right now */
        1:  255:            CFE_EVS_SendEvent (CS_RECOMPUTE_MEMORY_CHDTASK_ERR_EID,
        -:  256:                               CFE_EVS_ERROR,
        -:  257:                               "Recompute baseline of Memory Entry ID %d failed: child task in use",
        -:  258:                               EntryID);
        1:  259:            CS_AppData.CmdErrCounter++;
        -:  260:        }
        -:  261:    }    
        6:  262:    return;
        -:  263:}/* end CS_RecomputeBaselineMemoryCmd */
        -:  264:
        -:  265:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  266:/*                                                                 */
        -:  267:/* CS Enable a specific entry in the Memory table command          */
        -:  268:/*                                                                 */
        -:  269:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        5:  270:void CS_EnableEntryIDMemoryCmd(CFE_SB_MsgPtr_t MessagePtr)
        -:  271:{
        -:  272:    /* command verification variables */
        5:  273:    uint16                                  ExpectedLength = sizeof(CS_EntryCmd_t);
        5:  274:    CS_EntryCmd_t                         * CmdPtr         = NULL;
        5:  275:    CS_Res_EepromMemory_Table_Entry_t     * ResultsEntry   = NULL; 
        5:  276:    uint16                                  EntryID        = 0;
        5:  277:    uint16                                  State          = CS_STATE_EMPTY;
        -:  278:
        -:  279:    /* Verify command packet length */
        5:  280:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength) )
        -:  281:    {
        4:  282:        CmdPtr = (CS_EntryCmd_t *) MessagePtr;
        4:  283:        EntryID = CmdPtr -> EntryID;
        -:  284:                
        9:  285:        if ((EntryID < CS_MAX_NUM_MEMORY_TABLE_ENTRIES) &&
        3:  286:            (CS_AppData.ResMemoryTblPtr[EntryID].State != CS_STATE_EMPTY) )
        -:  287:        {
        2:  288:            ResultsEntry = &CS_AppData.ResMemoryTblPtr[EntryID]; 
        -:  289:             
        2:  290:            ResultsEntry -> State = CS_STATE_ENABLED;
        -:  291:            
        2:  292:            CFE_EVS_SendEvent (CS_ENABLE_MEMORY_ENTRY_INF_EID,
        -:  293:                               CFE_EVS_INFORMATION,
        -:  294:                               "Checksumming of Memory Entry ID %d is Enabled", 
        -:  295:                                EntryID);
        -:  296:            
        2:  297:            if (CS_AppData.DefMemoryTblPtr[EntryID].State != CS_STATE_EMPTY)
        -:  298:            {
        1:  299:                CS_AppData.DefMemoryTblPtr[EntryID].State = CS_STATE_ENABLED;
        1:  300:                CS_ResetTablesTblResultEntry(CS_AppData.MemResTablesTblPtr);                
        1:  301:                CFE_TBL_Modified(CS_AppData.DefMemoryTableHandle);
        -:  302:            }
        -:  303:            else 
        -:  304:            {
        1:  305:                CFE_EVS_SendEvent (CS_ENABLE_MEMORY_DEF_EMPTY_DBG_EID,
        -:  306:                                   CFE_EVS_DEBUG,
        -:  307:                                   "CS unable to update memory definition table for entry %d, State: %d",
        -:  308:                                   EntryID,
        -:  309:                                   State);
        -:  310:            }
        -:  311:            
        2:  312:            CS_AppData.CmdCounter++;
        -:  313:        }
        -:  314:        else
        -:  315:        {
        2:  316:            if (EntryID >= CS_MAX_NUM_MEMORY_TABLE_ENTRIES)
        -:  317:            {
        1:  318:                State = CS_STATE_UNDEFINED;
        -:  319:            }
        -:  320:            else
        -:  321:            {
        1:  322:                State = CS_AppData.ResMemoryTblPtr[EntryID].State;
        -:  323:            }
        -:  324:            
        2:  325:            CFE_EVS_SendEvent (CS_ENABLE_MEMORY_INVALID_ENTRY_ERR_EID,
        -:  326:                               CFE_EVS_ERROR,
        -:  327:                               "Enable Memory entry failed, invalid Entry ID:  %d, State: %d, Max ID: %d",
        -:  328:                               EntryID,
        -:  329:                               State,
        -:  330:                               (CS_MAX_NUM_MEMORY_TABLE_ENTRIES - 1));
        2:  331:            CS_AppData.CmdErrCounter++;
        -:  332:        }
        -:  333:    }
        5:  334:    return;
        -:  335:} /* End of CS_EnableCSEntryIDMemoryCmd () */
        -:  336:
        -:  337:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  338:/*                                                                 */
        -:  339:/* CS Disable a specific entry in the Memory table command         */
        -:  340:/*                                                                 */
        -:  341:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        5:  342:void CS_DisableEntryIDMemoryCmd(CFE_SB_MsgPtr_t MessagePtr)
        -:  343:{
        -:  344:    /* command verification variables */
        5:  345:    uint16                                  ExpectedLength = sizeof(CS_EntryCmd_t);
        5:  346:    CS_EntryCmd_t                         * CmdPtr         = NULL;
        5:  347:    CS_Res_EepromMemory_Table_Entry_t     * ResultsEntry   = NULL;
        5:  348:    uint16                                  EntryID        = 0;
        5:  349:    uint16                                  State          = CS_STATE_EMPTY;
        -:  350:
        -:  351:    /* Verify command packet length */
        5:  352:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength) )
        -:  353:    {
        4:  354:        CmdPtr = (CS_EntryCmd_t *) MessagePtr;
        4:  355:        EntryID = CmdPtr -> EntryID;
        -:  356:        
        9:  357:        if ((EntryID < CS_MAX_NUM_MEMORY_TABLE_ENTRIES) &&
        3:  358:            (CS_AppData.ResMemoryTblPtr[EntryID].State != CS_STATE_EMPTY) )
        -:  359:        {
        2:  360:            ResultsEntry = & CS_AppData.ResMemoryTblPtr[EntryID]; 
        -:  361:            
        2:  362:            ResultsEntry -> State = CS_STATE_DISABLED;
        2:  363:            ResultsEntry -> TempChecksumValue = 0;
        2:  364:            ResultsEntry -> ByteOffset = 0;
        -:  365:            
        2:  366:            CFE_EVS_SendEvent (CS_DISABLE_MEMORY_ENTRY_INF_EID,
        -:  367:                               CFE_EVS_INFORMATION,
        -:  368:                               "Checksumming of Memory Entry ID %d is Disabled", 
        -:  369:                               EntryID);
        -:  370:            
        2:  371:            if (CS_AppData.DefMemoryTblPtr[EntryID].State != CS_STATE_EMPTY)
        -:  372:            {
        1:  373:                CS_AppData.DefMemoryTblPtr[EntryID].State = CS_STATE_DISABLED;
        1:  374:                CS_ResetTablesTblResultEntry(CS_AppData.MemResTablesTblPtr);                
        1:  375:                CFE_TBL_Modified(CS_AppData.DefMemoryTableHandle);
        -:  376:            }
        -:  377:            else 
        -:  378:            {
        1:  379:                CFE_EVS_SendEvent (CS_DISABLE_MEMORY_DEF_EMPTY_DBG_EID,
        -:  380:                                   CFE_EVS_DEBUG,
        -:  381:                                   "CS unable to update memory definition table for entry %d, State: %d",
        -:  382:                                   EntryID,
        -:  383:                                   State);
        -:  384:            }
        -:  385:            
        2:  386:            CS_AppData.CmdCounter++;
        -:  387:        }
        -:  388:        else
        -:  389:        {
        2:  390:            if (EntryID >= CS_MAX_NUM_MEMORY_TABLE_ENTRIES)
        -:  391:            {
        1:  392:                State = CS_STATE_UNDEFINED;
        -:  393:            }
        -:  394:            else
        -:  395:            {
        1:  396:                State = CS_AppData.ResMemoryTblPtr[EntryID].State;
        -:  397:            }
        -:  398:            
        2:  399:            CFE_EVS_SendEvent (CS_DISABLE_MEMORY_INVALID_ENTRY_ERR_EID,
        -:  400:                               CFE_EVS_ERROR,
        -:  401:                               "Disable Memory entry failed, invalid Entry ID:  %d, State: %d, Max ID: %d",
        -:  402:                               EntryID,
        -:  403:                               State,
        -:  404:                               (CS_MAX_NUM_MEMORY_TABLE_ENTRIES -1));
        -:  405:            
        2:  406:            CS_AppData.CmdErrCounter++;
        -:  407:        }
        -:  408:    }
        5:  409:    return;
        -:  410:} /* End of CS_DisableCSEntryIDMemoryCmd () */
        -:  411:
        -:  412:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  413:/*                                                                 */
        -:  414:/* CS Retrieve an EntryID based on Address from Memory table cmd   */
        -:  415:/*                                                                 */
        -:  416:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        3:  417:void CS_GetEntryIDMemoryCmd(CFE_SB_MsgPtr_t MessagePtr)
        -:  418:{
        -:  419:    /* command verification variables */
        3:  420:    uint16                                  ExpectedLength      = sizeof(CS_GetEntryIDCmd_t);
        3:  421:    CS_GetEntryIDCmd_t                    * CmdPtr              = NULL;
        3:  422:    CS_Res_EepromMemory_Table_Entry_t     * StartOfResultsTable = NULL; 
        3:  423:    CS_Res_EepromMemory_Table_Entry_t     * ResultsEntry        = NULL;
        3:  424:    uint16                                  Loop                = 0;
        3:  425:    boolean                                 EntryFound          = FALSE;
        -:  426:    
        -:  427:    /* Verify command packet length */
        3:  428:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength) )
        -:  429:    {
        2:  430:        CmdPtr = (CS_GetEntryIDCmd_t *) MessagePtr;
        -:  431:        
        2:  432:        StartOfResultsTable = CS_AppData.ResMemoryTblPtr;   
        -:  433:        
       34:  434:        for ( Loop = 0; Loop < CS_MAX_NUM_MEMORY_TABLE_ENTRIES; Loop ++)
        -:  435:        {
       32:  436:            ResultsEntry = & StartOfResultsTable[Loop];
        -:  437:            
       65:  438:            if ( (ResultsEntry->StartAddress <= CmdPtr -> Address) &&
       32:  439:                CmdPtr -> Address <= (ResultsEntry->StartAddress + ResultsEntry->NumBytesToChecksum) &&
        1:  440:                ResultsEntry->State != CS_STATE_EMPTY)
        -:  441:            {
        -:  442:                
        2:  443:                CFE_EVS_SendEvent (CS_GET_ENTRY_ID_MEMORY_INF_EID,
        -:  444:                                   CFE_EVS_INFORMATION,
        -:  445:                                   "Memory Found Address 0x%08X in Entry ID %d", 
        1:  446:                                   (unsigned int)(CmdPtr -> Address),
        -:  447:                                   Loop);
        1:  448:                EntryFound = TRUE;
        -:  449:            }
        -:  450:        }
        -:  451:        
        2:  452:        if (EntryFound == FALSE)
        -:  453:        {
        1:  454:            CFE_EVS_SendEvent (CS_GET_ENTRY_ID_MEMORY_NOT_FOUND_INF_EID,
        -:  455:                               CFE_EVS_INFORMATION,
        -:  456:                               "Address 0x%08X was not found in Memory table",
        1:  457:                               (unsigned int)(CmdPtr -> Address));
        -:  458:        }
        2:  459:        CS_AppData.CmdCounter++;
        -:  460:    }
        3:  461:    return;
        -:  462:    
        -:  463:} /* End of CS_GetEntryIDMemoryCmd () */
        -:  464:
        -:  465:/************************/
        -:  466:/*  End of File Comment */
        -:  467:/************************/
