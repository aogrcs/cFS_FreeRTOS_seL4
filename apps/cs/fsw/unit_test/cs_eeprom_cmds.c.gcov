        -:    0:Source:../src/cs_eeprom_cmds.c
        -:    0:Programs:9
        -:    1:/************************************************************************
        -:    2: ** File:
        -:    3: **   $Id: cs_eeprom_cmds.c.gcov 1.5 2017/03/29 19:31:18EDT mdeschu Exp  $
        -:    4: **
        -:    5: **   Copyright (c) 2007-2014 United States Government as represented by the 
        -:    6: **   Administrator of the National Aeronautics and Space Administration. 
        -:    7: **   All Other Rights Reserved.  
        -:    8: **
        -:    9: **   This software was created at NASA's Goddard Space Flight Center.
        -:   10: **   This software is governed by the NASA Open Source Agreement and may be 
        -:   11: **   used, distributed and modified only pursuant to the terms of that 
        -:   12: **   agreement.
        -:   13: **
        -:   14: ** Purpose: 
        -:   15: **   The CFS Checksum (CS) Application's commands for checking Eeprom
        -:   16: ** 
        -:   17: *************************************************************************/
        -:   18:
        -:   19:/**************************************************************************
        -:   20: **
        -:   21: ** Include section
        -:   22: **
        -:   23: **************************************************************************/
        -:   24:#include "cfe.h"
        -:   25:#include "cs_tbldefs.h"
        -:   26:#include "cs_app.h"
        -:   27:#include "cs_events.h"
        -:   28:#include "cs_compute.h"
        -:   29:#include "cs_eeprom_cmds.h"
        -:   30:#include "cs_utils.h"
        -:   31:
        -:   32:/**************************************************************************
        -:   33: **
        -:   34: ** Functions
        -:   35: **
        -:   36: **************************************************************************/
        -:   37:
        -:   38:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   39:/*                                                                 */
        -:   40:/* CS Disable background checking of Eeprom command                */
        -:   41:/*                                                                 */
        -:   42:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        2:   43:void CS_DisableEepromCmd(CFE_SB_MsgPtr_t MessagePtr)
        -:   44:{
        -:   45:    /* command verification variables */
        2:   46:    uint16                                  ExpectedLength = sizeof(CS_NoArgsCmd_t);
        -:   47:    
        -:   48:    /* Verify command packet length */
        2:   49:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength) )
        -:   50:    {
        2:   51:        CS_AppData.EepromCSState = CS_STATE_DISABLED;
        2:   52:        CS_ZeroEepromTempValues();
        -:   53:        
        -:   54:#if (CS_PRESERVE_STATES_ON_PROCESSOR_RESET == TRUE)
        2:   55:        CS_UpdateCDS();
        -:   56:#endif
        -:   57:        
        2:   58:        CFE_EVS_SendEvent (CS_DISABLE_EEPROM_INF_EID,
        -:   59:                           CFE_EVS_INFORMATION,
        -:   60:                           "Checksumming of Eeprom is Disabled");
        -:   61:        
        2:   62:        CS_AppData.CmdCounter++;
        -:   63:    }
        2:   64:    return;
        -:   65:} /* End of CS_DisableEepromCmd () */
        -:   66:
        -:   67:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   68:/*                                                                 */
        -:   69:/* CS Enable background checking of Eeprom command                 */
        -:   70:/*                                                                 */
        -:   71:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        2:   72:void CS_EnableEepromCmd(CFE_SB_MsgPtr_t MessagePtr)
        -:   73:{
        -:   74:    /* command verification variables */
        2:   75:    uint16                                  ExpectedLength = sizeof(CS_NoArgsCmd_t);
        -:   76:    
        -:   77:    /* Verify command packet length */
        2:   78:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength) )
        -:   79:    {
        2:   80:        CS_AppData.EepromCSState = CS_STATE_ENABLED;
        -:   81:        
        -:   82:#if (CS_PRESERVE_STATES_ON_PROCESSOR_RESET == TRUE)
        2:   83:        CS_UpdateCDS();
        -:   84:#endif
        -:   85:        
        2:   86:        CFE_EVS_SendEvent (CS_ENABLE_EEPROM_INF_EID,
        -:   87:                           CFE_EVS_INFORMATION,
        -:   88:                           "Checksumming of Eeprom is Enabled");
        -:   89:        
        2:   90:        CS_AppData.CmdCounter++;
        -:   91:    }
        2:   92:    return;
        -:   93:} /* End of CS_EnableEepromCmd () */
        -:   94:
        -:   95:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   96:/*                                                                 */
        -:   97:/* CS Report the baseline checksum of an entry in the Eeprom table */
        -:   98:/*                                                                 */
        -:   99:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        5:  100:void CS_ReportBaselineEntryIDEepromCmd(CFE_SB_MsgPtr_t MessagePtr)
        -:  101:{
        -:  102:    /* command verification variables */
        5:  103:    uint16                                  ExpectedLength = sizeof(CS_EntryCmd_t);
        -:  104:    
        5:  105:    CS_EntryCmd_t                         * CmdPtr         = 0;
        5:  106:    uint32                                  Baseline       = 0;
        5:  107:    uint16                                  EntryID        = 0;
        5:  108:    uint16                                  State          = CS_STATE_EMPTY;
        -:  109:    CS_Res_EepromMemory_Table_Entry_t       ResultsEntry; 
        -:  110:    
        -:  111:    /* Verify command packet length */
        5:  112:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength) )
        -:  113:    {
        4:  114:        CmdPtr = (CS_EntryCmd_t *) MessagePtr;
        4:  115:        EntryID = CmdPtr -> EntryID;
        -:  116:        
        9:  117:        if ((EntryID < CS_MAX_NUM_EEPROM_TABLE_ENTRIES) &&
        3:  118:            (CS_AppData.ResEepromTblPtr[EntryID].State != CS_STATE_EMPTY) )
        -:  119:        {
        2:  120:            ResultsEntry = CS_AppData.ResEepromTblPtr[EntryID];
        -:  121:            
        2:  122:            if (ResultsEntry.ComputedYet == TRUE)
        -:  123:            {
        1:  124:                Baseline = ResultsEntry.ComparisonValue;
        -:  125:                
        1:  126:                CFE_EVS_SendEvent (CS_BASELINE_EEPROM_INF_EID,
        -:  127:                                   CFE_EVS_INFORMATION,
        -:  128:                                   "Report baseline of Eeprom Entry %d is 0x%08X", 
        -:  129:                                   EntryID,
        -:  130:                                   (unsigned int)Baseline);
        -:  131:            }
        -:  132:            else
        -:  133:            {
        1:  134:                CFE_EVS_SendEvent (CS_NO_BASELINE_EEPROM_INF_EID,
        -:  135:                                   CFE_EVS_INFORMATION,
        -:  136:                                   "Report baseline of Eeprom Entry %d has not been computed yet", 
        -:  137:                                   EntryID);   
        -:  138:            }
        2:  139:            CS_AppData.CmdCounter++;
        -:  140:        }
        -:  141:        else
        -:  142:        {
        2:  143:            if (EntryID >= CS_MAX_NUM_EEPROM_TABLE_ENTRIES)
        -:  144:            {
        1:  145:                State = CS_STATE_UNDEFINED;
        -:  146:            }
        -:  147:            else
        -:  148:            {
        1:  149:                State = CS_AppData.ResEepromTblPtr[EntryID].State;
        -:  150:            }
        -:  151:            
        2:  152:            CFE_EVS_SendEvent (CS_BASELINE_INVALID_ENTRY_EEPROM_ERR_EID,
        -:  153:                               CFE_EVS_ERROR,
        -:  154:                               "Eeprom report baseline failed, Entry ID invalid: %d, State: %d Max ID: %d",
        -:  155:                               EntryID,
        -:  156:                               State,
        -:  157:                               (CS_MAX_NUM_EEPROM_TABLE_ENTRIES - 1));
        2:  158:            CS_AppData.CmdErrCounter++;
        -:  159:        }
        -:  160:    }
        5:  161:    return;
        -:  162:} /* End of CS_ReportBaselineEntryIDCmd () */
        -:  163:
        -:  164:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  165:/*                                                                 */
        -:  166:/* CS Recompute the baseline of an entry in the Eeprom table cmd   */
        -:  167:/*                                                                 */
        -:  168:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        6:  169:void CS_RecomputeBaselineEepromCmd (CFE_SB_MsgPtr_t MessagePtr)
        -:  170:{
        -:  171:    /* command verification variables */
        6:  172:    uint16                                  ExpectedLength = sizeof(CS_EntryCmd_t);
        -:  173:    
        6:  174:    uint32                                  ChildTaskID    = 0;
        6:  175:    int32                                   Status         = -1;
        6:  176:    CS_EntryCmd_t                         * CmdPtr         = NULL;
        6:  177:    uint16                                  EntryID        = 0;
        6:  178:    uint16                                  State          = CS_STATE_EMPTY;
        -:  179:    
        -:  180:    /* Verify command packet length */
        6:  181:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength) )
        -:  182:    {
        5:  183:        CmdPtr = (CS_EntryCmd_t *) MessagePtr;
        5:  184:        EntryID = CmdPtr -> EntryID;
        -:  185:        
        9:  186:        if (CS_AppData.RecomputeInProgress == FALSE && CS_AppData.OneShotInProgress == FALSE)
        -:  187:        {            
        -:  188:            /* make sure the entry is a valid number and is defined in the table */
        9:  189:            if ((EntryID < CS_MAX_NUM_EEPROM_TABLE_ENTRIES) &&
        3:  190:                (CS_AppData.ResEepromTblPtr[EntryID].State != CS_STATE_EMPTY) )
        -:  191:            {
        -:  192:                
        -:  193:                /* There is no child task running right now, we can use it*/
        2:  194:                CS_AppData.RecomputeInProgress           = TRUE;
        -:  195:                
        -:  196:                /* fill in child task variables */
        2:  197:                CS_AppData.ChildTaskTable                = CS_EEPROM_TABLE;
        2:  198:                CS_AppData.ChildTaskEntryID              = EntryID;
        -:  199:                
        -:  200:                
        2:  201:                CS_AppData.RecomputeEepromMemoryEntryPtr = &CS_AppData.ResEepromTblPtr[EntryID];
        -:  202:                
        2:  203:                Status= CFE_ES_CreateChildTask(&ChildTaskID,
        -:  204:                                               CS_RECOMP_EEPROM_TASK_NAME,
        -:  205:                                               CS_RecomputeEepromMemoryChildTask,
        -:  206:                                               NULL,
        -:  207:                                               CFE_ES_DEFAULT_STACK_SIZE,
        -:  208:                                               CS_CHILD_TASK_PRIORITY,
        -:  209:                                               0);
        2:  210:                if (Status ==CFE_SUCCESS)
        -:  211:                {
        1:  212:                    CFE_EVS_SendEvent (CS_RECOMPUTE_EEPROM_STARTED_DBG_EID,
        -:  213:                                       CFE_EVS_DEBUG,
        -:  214:                                       "Recompute baseline of Eeprom Entry ID %d started", 
        -:  215:                                       EntryID);
        1:  216:                    CS_AppData.CmdCounter++;
        -:  217:                }
        -:  218:                else/* child task creation failed */
        -:  219:                {
        1:  220:                    CFE_EVS_SendEvent (CS_RECOMPUTE_EEPROM_CREATE_CHDTASK_ERR_EID,
        -:  221:                                       CFE_EVS_ERROR,
        -:  222:                                       "Recompute baseline of Eeprom Entry ID %d failed, CFE_ES_CreateChildTask returned:  0x%08X",
        -:  223:                                       EntryID,
        -:  224:                                       (unsigned int)Status);
        1:  225:                    CS_AppData.CmdErrCounter++;
        1:  226:                    CS_AppData.RecomputeInProgress = FALSE;
        -:  227:                }
        -:  228:            }
        -:  229:            else
        -:  230:            {
        2:  231:                if (EntryID >= CS_MAX_NUM_EEPROM_TABLE_ENTRIES)
        -:  232:                {
        1:  233:                    State = CS_STATE_UNDEFINED;
        -:  234:                }
        -:  235:                else
        -:  236:                {
        1:  237:                    State = CS_AppData.ResEepromTblPtr[EntryID].State;
        -:  238:                }
        -:  239:            
        2:  240:                CFE_EVS_SendEvent (CS_RECOMPUTE_INVALID_ENTRY_EEPROM_ERR_EID,
        -:  241:                                   CFE_EVS_ERROR,
        -:  242:                                   "Eeprom recompute baseline of entry failed, Entry ID invalid: %d, State: %d, Max ID: %d",
        -:  243:                                   EntryID,
        -:  244:                                   State,
        -:  245:                                   (CS_MAX_NUM_EEPROM_TABLE_ENTRIES - 1));
        -:  246:                
        2:  247:                CS_AppData.CmdErrCounter++;
        -:  248:            }
        -:  249:        }
        -:  250:        else
        -:  251:        {
        -:  252:            /*send event that we can't start another task right now */
        1:  253:            CFE_EVS_SendEvent (CS_RECOMPUTE_EEPROM_CHDTASK_ERR_EID,
        -:  254:                               CFE_EVS_ERROR,
        -:  255:                               "Recompute baseline of Eeprom Entry ID %d failed: child task in use",
        -:  256:                               EntryID);
        1:  257:            CS_AppData.CmdErrCounter++;
        -:  258:        }
        -:  259:    }    
        6:  260:    return;
        -:  261:}/* end CS_RecomputeBaselineEepromCmd */
        -:  262:
        -:  263:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  264:/*                                                                 */
        -:  265:/* CS Enable a specific entry in the Eeprom table command          */
        -:  266:/*                                                                 */
        -:  267:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        5:  268:void CS_EnableEntryIDEepromCmd(CFE_SB_MsgPtr_t MessagePtr)
        -:  269:{
        -:  270:    /* command verification variables */
        5:  271:    uint16                                  ExpectedLength = sizeof(CS_EntryCmd_t);
        -:  272:    
        5:  273:    CS_EntryCmd_t                         * CmdPtr         = NULL;
        5:  274:    CS_Res_EepromMemory_Table_Entry_t     * ResultsEntry   = NULL; 
        5:  275:    uint16                                  EntryID        = 0;
        5:  276:    uint16                                  State          = CS_STATE_EMPTY;
        -:  277:
        -:  278:    /* Verify command packet length */
        5:  279:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength) )
        -:  280:    {
        4:  281:        CmdPtr = (CS_EntryCmd_t *) MessagePtr;
        4:  282:        EntryID = CmdPtr -> EntryID;
        -:  283:                
        9:  284:        if ((EntryID < CS_MAX_NUM_EEPROM_TABLE_ENTRIES) &&
        3:  285:            (CS_AppData.ResEepromTblPtr[EntryID].State != CS_STATE_EMPTY) )
        -:  286:        {
        2:  287:            ResultsEntry = &CS_AppData.ResEepromTblPtr[EntryID]; 
        -:  288:             
        2:  289:            ResultsEntry -> State = CS_STATE_ENABLED;
        -:  290:            
        2:  291:            CFE_EVS_SendEvent (CS_ENABLE_EEPROM_ENTRY_INF_EID,
        -:  292:                               CFE_EVS_INFORMATION,
        -:  293:                               "Checksumming of Eeprom Entry ID %d is Enabled", 
        -:  294:                                EntryID);
        -:  295:            
        2:  296:            if (CS_AppData.DefEepromTblPtr[EntryID].State != CS_STATE_EMPTY)
        -:  297:            {
        1:  298:                CS_AppData.DefEepromTblPtr[EntryID].State = CS_STATE_ENABLED;
        1:  299:                CS_ResetTablesTblResultEntry(CS_AppData.EepResTablesTblPtr);                
        1:  300:                CFE_TBL_Modified(CS_AppData.DefEepromTableHandle);
        -:  301:            }
        -:  302:            else 
        -:  303:            {
        1:  304:                CFE_EVS_SendEvent (CS_ENABLE_EEPROM_DEF_EMPTY_DBG_EID,
        -:  305:                                   CFE_EVS_DEBUG,
        -:  306:                                   "CS unable to update Eeprom definition table for entry %d, State: %d",
        -:  307:                                   EntryID,
        -:  308:                                   State);
        -:  309:            }
        -:  310:        
        2:  311:            CS_AppData.CmdCounter++;
        -:  312:        }
        -:  313:        else
        -:  314:        {
        2:  315:            if (EntryID >= CS_MAX_NUM_EEPROM_TABLE_ENTRIES)
        -:  316:            {
        1:  317:                State = CS_STATE_UNDEFINED;
        -:  318:            }
        -:  319:            else
        -:  320:            {
        1:  321:                State = CS_AppData.ResEepromTblPtr[EntryID].State;
        -:  322:            }
        -:  323:            
        2:  324:            CFE_EVS_SendEvent (CS_ENABLE_EEPROM_INVALID_ENTRY_ERR_EID,
        -:  325:                               CFE_EVS_ERROR,
        -:  326:                               "Enable Eeprom entry failed, invalid Entry ID:  %d, State: %d, Max ID: %d",
        -:  327:                               EntryID,
        -:  328:                               State,
        -:  329:                               (CS_MAX_NUM_EEPROM_TABLE_ENTRIES - 1));
        2:  330:            CS_AppData.CmdErrCounter++;
        -:  331:        }
        -:  332:    }
        5:  333:    return;
        -:  334:} /* End of CS_EnableCSEntryIDEepromCmd () */
        -:  335:
        -:  336:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  337:/*                                                                 */
        -:  338:/* CS Disable a specific entry in the Eeprom table command         */
        -:  339:/*                                                                 */
        -:  340:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        5:  341:void CS_DisableEntryIDEepromCmd(CFE_SB_MsgPtr_t MessagePtr)
        -:  342:{
        -:  343:    /* command verification variables */
        5:  344:    uint16                                  ExpectedLength = sizeof(CS_EntryCmd_t);
        -:  345:    
        5:  346:    CS_EntryCmd_t                         * CmdPtr         = NULL;
        5:  347:    CS_Res_EepromMemory_Table_Entry_t     * ResultsEntry   = NULL;
        5:  348:    uint16                                  EntryID        = 0;
        5:  349:    uint16                                  State          = CS_STATE_EMPTY;
        -:  350:
        -:  351:    /* Verify command packet length */
        5:  352:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength) )
        -:  353:    {
        4:  354:        CmdPtr = (CS_EntryCmd_t *) MessagePtr;
        4:  355:        EntryID = CmdPtr -> EntryID;
        -:  356:        
        9:  357:        if ((EntryID < CS_MAX_NUM_EEPROM_TABLE_ENTRIES) &&
        3:  358:            (CS_AppData.ResEepromTblPtr[EntryID].State != CS_STATE_EMPTY) )
        -:  359:        {
        2:  360:            ResultsEntry = & CS_AppData.ResEepromTblPtr[EntryID]; 
        -:  361:            
        2:  362:            ResultsEntry -> State = CS_STATE_DISABLED;
        2:  363:            ResultsEntry -> TempChecksumValue = 0;
        2:  364:            ResultsEntry -> ByteOffset = 0;
        -:  365:            
        2:  366:            CFE_EVS_SendEvent (CS_DISABLE_EEPROM_ENTRY_INF_EID,
        -:  367:                               CFE_EVS_INFORMATION,
        -:  368:                               "Checksumming of Eeprom Entry ID %d is Disabled", 
        -:  369:                               EntryID);
        -:  370:            
        2:  371:            if (CS_AppData.DefEepromTblPtr[EntryID].State != CS_STATE_EMPTY)
        -:  372:            {
        1:  373:                CS_AppData.DefEepromTblPtr[EntryID].State = CS_STATE_DISABLED;
        1:  374:                CS_ResetTablesTblResultEntry(CS_AppData.EepResTablesTblPtr);                
        1:  375:                CFE_TBL_Modified(CS_AppData.DefEepromTableHandle);
        -:  376:            }
        -:  377:            else 
        -:  378:            {
        1:  379:                CFE_EVS_SendEvent (CS_DISABLE_EEPROM_DEF_EMPTY_DBG_EID,
        -:  380:                                   CFE_EVS_DEBUG,
        -:  381:                                   "CS unable to update Eeprom definition table for entry %d, State: %d",
        -:  382:                                   EntryID,
        -:  383:                                   State);
        -:  384:            }
        -:  385:            
        2:  386:            CS_AppData.CmdCounter++;
        -:  387:        }
        -:  388:        else
        -:  389:        {
        2:  390:            if (EntryID >= CS_MAX_NUM_EEPROM_TABLE_ENTRIES)
        -:  391:            {
        1:  392:                State = CS_STATE_UNDEFINED;
        -:  393:            }
        -:  394:            else
        -:  395:            {
        1:  396:                State = CS_AppData.ResEepromTblPtr[EntryID].State;
        -:  397:            }
        -:  398:            
        2:  399:            CFE_EVS_SendEvent (CS_DISABLE_EEPROM_INVALID_ENTRY_ERR_EID,
        -:  400:                               CFE_EVS_ERROR,
        -:  401:                               "Disable Eeprom entry failed, invalid Entry ID:  %d, State: %d, Max ID: %d",
        -:  402:                               EntryID,
        -:  403:                               State,
        -:  404:                               (CS_MAX_NUM_EEPROM_TABLE_ENTRIES - 1));
        -:  405:            
        2:  406:            CS_AppData.CmdErrCounter++;
        -:  407:        }
        -:  408:    }
        5:  409:    return;
        -:  410:} /* End of CS_DisableCSEntryIDEepromCmd () */
        -:  411:
        -:  412:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  413:/*                                                                 */
        -:  414:/* CS Retrieve an EntryID based on Address from Eeprom table cmd   */
        -:  415:/*                                                                 */
        -:  416:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        3:  417:void CS_GetEntryIDEepromCmd(CFE_SB_MsgPtr_t MessagePtr)
        -:  418:{
        -:  419:    /* command verification variables */
        3:  420:    uint16                                  ExpectedLength      = sizeof(CS_GetEntryIDCmd_t);
        -:  421:    
        3:  422:    CS_GetEntryIDCmd_t                    * CmdPtr              = NULL;
        3:  423:    CS_Res_EepromMemory_Table_Entry_t     * StartOfResultsTable = NULL; 
        3:  424:    uint16                                  Loop                = 0;
        3:  425:    boolean                                 EntryFound          = FALSE;
        -:  426:    CS_Res_EepromMemory_Table_Entry_t       ResultsEntry;
        -:  427:    
        -:  428:    /* Verify command packet length */
        3:  429:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength) )
        -:  430:    {
        2:  431:        CmdPtr = (CS_GetEntryIDCmd_t *) MessagePtr;
        -:  432:        
        2:  433:        StartOfResultsTable = CS_AppData.ResEepromTblPtr;   
        -:  434:        
       34:  435:        for ( Loop = 0; Loop < CS_MAX_NUM_EEPROM_TABLE_ENTRIES; Loop ++)
        -:  436:        {
       32:  437:            ResultsEntry = StartOfResultsTable[Loop];
        -:  438:            
       65:  439:            if ( (ResultsEntry.StartAddress <= CmdPtr -> Address) &&
       32:  440:                CmdPtr -> Address <= (ResultsEntry.StartAddress + ResultsEntry.NumBytesToChecksum) &&
        1:  441:                ResultsEntry.State != CS_STATE_EMPTY)
        -:  442:            {
        -:  443:                
        2:  444:                CFE_EVS_SendEvent (CS_GET_ENTRY_ID_EEPROM_INF_EID,
        -:  445:                                   CFE_EVS_INFORMATION,
        -:  446:                                   "Eeprom Found Address 0x%08X in Entry ID %d", 
        1:  447:                                   (unsigned int)(CmdPtr -> Address),
        -:  448:                                   Loop);
        1:  449:                EntryFound = TRUE;
        -:  450:            }
        -:  451:        }
        -:  452:        
        2:  453:        if (EntryFound == FALSE)
        -:  454:        {
        1:  455:            CFE_EVS_SendEvent (CS_GET_ENTRY_ID_EEPROM_NOT_FOUND_INF_EID,
        -:  456:                               CFE_EVS_INFORMATION,
        -:  457:                               "Address 0x%08X was not found in Eeprom table",
        1:  458:                               (unsigned int)(CmdPtr -> Address));
        -:  459:        }
        2:  460:        CS_AppData.CmdCounter++;
        -:  461:    }
        3:  462:    return;
        -:  463:} /* End of CS_GetEntryIDEepromCmd () */
        -:  464:
        -:  465:/************************/
        -:  466:/*  End of File Comment */
        -:  467:/************************/
